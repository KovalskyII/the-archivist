import re
import os
import sys
import asyncio
import random
import html
from typing import List, Tuple
from datetime import datetime

from aiogram import types
from aiogram.types import FSInputFile

from db import (
    # –±–∞–∑–æ–≤—ã–µ
    get_balance, change_balance, set_role, get_role,
    grant_key, revoke_key, has_key, get_last_history,
    get_top_users, get_all_roles, reset_user_balance,
    reset_all_balances, set_role_image, get_role_with_image,
    get_key_holders, get_known_users, hero_get_current, hero_set_for_today,
    hero_has_claimed_today, hero_record_claim,
    get_stipend_base, get_stipend_bonus, set_stipend_base, set_stipend_bonus,
    get_generosity_mult_pct, add_generosity_points, generosity_try_payout,
    get_market_turnover_days, codeword_get_active, codeword_mark_win,
    codeword_set, codeword_cancel_active, set_generosity_mult_pct,
    set_generosity_threshold, set_price_pin, set_price_pin_loud,
    insert_history, get_circulating, get_price_pin, get_price_pin_loud,
    get_generosity_points, get_generosity_threshold, hero_get_current_with_until,
    get_perk_shield_chance, set_perk_shield_chance,
    get_perk_croupier_chance, set_perk_croupier_chance,
    get_perk_philanthrope_chance, set_perk_philanthrope_chance,
    get_perk_lucky_chance, set_perk_lucky_chance,

    # –∞–Ω—Ç–∏-–¥—É–±–ª—å
    is_msg_processed, mark_msg_processed,

    # –ø–µ—Ä–∫–∏
    grant_perk, revoke_perk, get_perks, get_perk_holders, get_perks_summary,

    # –ó–ü/–∫—Ä–∞–∂–∞
    get_seconds_since_last_salary_claim, record_salary_claim,
    get_seconds_since_last_theft, record_theft,

    # —ç–∫–æ–Ω–æ–º–∏–∫–∞/—Å–µ–π—Ñ
    vault_init, get_economy_stats, get_last_vault_cap,
    get_burn_bps, set_burn_bps, get_income, set_income,

    # –∫–æ–Ω—Ñ–∏–≥–∏ –∏–≥—Ä/–ª–∏–º–∏—Ç–æ–≤/—Ü–µ–Ω
    get_multipliers, set_multiplier, get_casino_on, set_casino_on,
    get_limit_bet, set_limit_bet, get_limit_rain, set_limit_rain,
    get_price_emerald, set_price_emerald, get_price_perk, set_price_perk,

    # —Ä—ã–Ω–æ–∫
    create_offer, cancel_offer, list_active_offers, record_burn,
)

KURATOR_ID = 164059195
CLUB_CHAT_ID = -1002431055065
ALLOWED_CONCERT_CHATS = {CLUB_CHAT_ID}

DB_PATH = "/data/bot_data.sqlite"

# --- –ì–µ—Ä–æ–π –¥–Ω—è (–∫–æ–Ω—Ü–µ—Ä—Ç) ---
HERO_CONCERT_MIN = 10
HERO_CONCERT_MAX = 50
HERO_TITLE = "–ü–µ–≤–µ—Ü –¥–Ω—è"  # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞

BET_LOCKS: dict[int, asyncio.Lock] = {}
def get_bet_lock(uid: int) -> asyncio.Lock:
    lock = BET_LOCKS.get(uid)
    if lock is None:
        lock = BET_LOCKS[uid] = asyncio.Lock()
    return lock

# –ö–æ–¥ –ø–µ—Ä–∫–∞ -> (—ç–º–æ–¥–∂–∏, —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
PERK_REGISTRY = {
    "–Ω–∞–¥–±–∞–≤–∫–∞": ("üíº", "–ù–∞–¥–±–∞–≤–∫–∞ –∫ –∂–∞–ª–æ–≤–∞–Ω–∏—é"),
    "–∫—Ä–∞–∂–∞": ("üó°Ô∏è", "–°–≤–æ—Ä–æ–≤–∞—Ç—å –Ω—É–∞—Ä—ã"),
    # NEW:
    "—â–∏—Ç": ("üõ°Ô∏è", "–©–∏—Ç –æ—Ç –∫—Ä–∞–∂–∏"),              # 50% —Å–æ—Ä–≤–∞—Ç—å –∫—Ä–∞–∂—É
    "–∫—Ä—É–ø—å–µ": ("üé©", "–ö—Ä—É–ø—å–µ"),                 # 15% —Ä–µ—Ñ–∞–Ω–¥ 50% —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
    "—Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø": ("üéÅ", "–§–∏–ª–∞–Ω—Ç—Ä–æ–ø"),           # 15% —à–µ—Å—Ç–æ–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–∂–¥—è –∑–∞ —Å—á—ë—Ç —Å–µ–π—Ñ–∞
    "–≤–µ–∑—É–Ω—á–∏–∫": ("üçÄ", "–í–µ–∑—É–Ω—á–∏–∫"),             # 33% —Å—Ç–∞—Ç—å —à–µ—Å—Ç—ã–º –≤ —á—É–∂–æ–º –¥–æ–∂–¥–µ
    "–ø—Ä–µ–º–∏—è": ("üèÖ", "–ü—Ä–µ–º–∏—è"),
}

def mention_html(user_id: int, fallback: str = "–£—á–∞—Å—Ç–Ω–∏–∫") -> str:
    safe = html.escape(fallback, quote=False)
    return f"<a href='tg://user?id={user_id}'>{safe}</a>"

def render_perks(perk_codes: set[str]) -> str:
    if not perk_codes:
        return "–£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä–∫–æ–≤."
    lines = ["–í–∞—à–∏ –ø–µ—Ä–∫–∏:"]
    items = []
    for code in perk_codes:
        meta = PERK_REGISTRY.get(code)
        if meta:
            emoji, title = meta
            items.append((title.lower(), f"{emoji} {title}"))
        else:
            items.append((code, f"‚Ä¢ {code}"))
    for _, line in sorted(items):
        lines.append(line)
    return "\n".join(lines)

def chance(pct: float) -> bool:
    try:
        return random.random() < (float(pct) / 100.0)
    except:
        return False


# -------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã --------

def fmt_int(n: int) -> str:
    return f"{n:,}"

def fmt_money(n: int) -> str:
    return f"{fmt_int(n)} ü™ô"

def fmt_percent_bps(bps: int) -> str:
    # 100 bps = 1%
    whole = bps // 100
    frac = bps % 100
    return f"{whole}.{frac:02d}%"

# --------- –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---------

async def handle_message(message: types.Message):
    if not message.text:
        return

    # –∞–Ω—Ç–∏-–¥—É–±–ª—å –Ω–∞ ¬´–∫–æ–º–∞–Ω–¥—ã¬ª (idempotency –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É message_id)
    if await is_msg_processed(message.chat.id, message.message_id):
        return
    await mark_msg_processed(message.chat.id, message.message_id)

    text = message.text.strip()
    text_l = text.lower()
    author_id = message.from_user.id

    if message.from_user.is_bot:
        return

    # --- –ª–æ–≤—É—à–∫–∞ –¥–ª—è –∫–æ–¥-—Å–ª–æ–≤–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ) ---
    if message.text and message.chat.id == CLUB_CHAT_ID:
        cw = await codeword_get_active(CLUB_CHAT_ID)
        if cw:
            def norm(s: str) -> str:
                return re.sub(r"[^a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9]+", "", s).lower().strip()
            guess  = norm(message.text)
            target = norm(cw["word"] or "")
            if target and guess == target:
                prize = int(cw["prize"])
                await change_balance(message.from_user.id, prize, "codeword_prize", message.from_user.id)
                await codeword_mark_win(CLUB_CHAT_ID, message.from_user.id, prize, cw["word"])
                await message.reply(
                    f"üéâ –°–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ! –ö–æ–Ω–µ—á–Ω–æ –∂–µ —ç—Ç–æ ‚Äî <b>{html.escape(cw['word'])}</b>.\n"
                    f"–¢—ã –ø–æ–ª—É—á–∞–µ—à—å: {fmt_money(prize)}.",
                    parse_mode="HTML"
                )
                return

    # ======= –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö =======
    t = message.text.lower().strip().split("@", 1)[0]
    if t in ("—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", "–∫–æ–º–∞–Ω–¥—ã", "/–∫–æ–º–∞–Ω–¥—ã", "/help"):
        try:
            await handle_commands_catalog(message)
        except Exception as e:
            # –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –ø–æ–∫–∞–∂–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: {e}")
        return

        
    if text_l == "–º–æ–π –∫–∞—Ä–º–∞–Ω":
        bal = await get_balance(author_id)
        await message.reply(f"–£ –í–∞—Å –≤ –∫–∞—Ä–º–∞–Ω–µ {fmt_money(bal)}.")
        return

    if text_l == "–º–æ—è —Ä–æ–ª—å":
        await handle_my_role(message)
        return

    if text_l == "—Ä–æ–ª—å" and message.reply_to_message:
        await handle_who_role(message)
        return

    if text_l == "–∫–ª—É–±":
        await message.answer(
            "üé© <b>–ö–ª—É–± Le Cadeau Noir</b>\n"
            "<i>–í –ø–µ—Ä–µ–≤–æ–¥–µ —Å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ ‚Äî ¬´–ß—ë—Ä–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫¬ª</i>\n\n"
            "üåë <b>–ö–æ–Ω—Ü–µ–ø—Ü–∏—è:</b>\n"
            "–ó–∞–∫—Ä—ã—Ç—ã–π —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π Telegram-–∫–ª—É–± –¥–ª—è —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —Å—Ç–∏–ª—è, —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–∏–ø—Ç–æ–ø–æ–¥–∞—Ä–∫–æ–≤.\n"
            "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª—É–±–∞ –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ (–∏ –∏–Ω–æ–≥–¥–∞ —Ä–µ–∞–ª—å–Ω—ã–º–∏) –ø–æ–¥–∞—Ä–∫–∞–º–∏.\n"
            "–ö–∞–∂–¥—ã–π –ø–æ–¥–∞—Ä–æ–∫ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∂–µ—Å—Ç, –∞ —Å–∏–º–≤–æ–ª —É–≤–∞–∂–µ–Ω–∏—è, —Ñ–ª–∏—Ä—Ç–∞ –∏–ª–∏ –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n"
            "üéì <b>–≠—Ç–∏–∫–µ—Ç:</b>\n"
            "–í—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏, –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç–∏ –∏ —É—Ç–æ–Ω—á—ë–Ω–Ω–æ–≥–æ —à–∏–∫–∞.\n"
            "–ü—Ä—è–º—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è ‚Äî –≤—Å—ë —á–µ—Ä–µ–∑ –Ω–∞–º—ë–∫–∏, —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É –∏ —Å–∏–º–≤–æ–ª—ã.",
            parse_mode="HTML"
        )
        return

    if text_l == "—Ä–µ–π—Ç–∏–Ω–≥ –∫–ª—É–±–∞":
        await handle_rating(message)
        return

    if text_l == "—á–ª–µ–Ω—ã –∫–ª—É–±–∞":
        await handle_club_members(message)
        return

    if text_l in ("—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ –∫–ª—é—á–∞", "–≤–ª–∞–¥–µ–ª—å—Ü—ã –∫–ª—é—á–∞"):
        await handle_key_holders_cmd(message)
        return

    if text_l.startswith("–ø–µ—Ä–µ–¥–∞—Ç—å "):
        await handle_peredat(message)
        return

    if text_l.startswith("—Å—Ç–∞–≤–ª—é"):
        tl = text_l
        if ("üé≤" in tl) or ("–∫—É–±–∏–∫" in tl):
            await handle_kubik(message); return
        if ("üéØ" in tl) or ("–¥–∞—Ä—Ç—Å" in tl):
            await handle_darts(message); return
        if ("üé≥" in tl) or ("–±–æ—É–ª–∏–Ω–≥" in tl):
            await handle_bowling(message); return
        if ("üé∞" in tl) or ("–∞–≤—Ç–æ–º–∞—Ç—ã" in tl) or ("—Å–ª–æ—Ç—ã" in tl):
            await handle_slots(message); return
        # –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∏–≥—Ä—É ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º —Ñ–æ—Ä–º–∞—Ç
        await message.reply("–£—Ç–æ—á–Ω–∏—Ç–µ –∏–≥—Ä—É: ¬´—Å—Ç–∞–≤–ª—é N –Ω–∞ üé≤/–∫—É–±–∏–∫ | üéØ/–¥–∞—Ä—Ç—Å | üé≥/–±–æ—É–ª–∏–Ω–≥ | üé∞/–∞–≤—Ç–æ–º–∞—Ç—ã¬ª.")
        return

    if text_l == "–º–æ–∏ –ø–µ—Ä–∫–∏":
        await handle_my_perks(message)
        return

    if text_l == "–ø–µ—Ä–∫–∏" and message.reply_to_message:
        await handle_perks_of(message)
        return

    if text_l == "–ø–æ–ª—É—á–∏—Ç—å –∂–∞–ª–æ–≤–∞–Ω–∏–µ":
        await handle_stipend_claim(message)
        return


    if text_l.startswith("–¥–æ–∂–¥—å "):
        await handle_dozhd(message)
        return

    # —Ä—ã–Ω–æ–∫
    if text_l == "—Ä—ã–Ω–æ–∫":
        await handle_market_show(message)
        return

    if text_l == "–∫—É–ø–∏—Ç—å —ç–º–µ—Ä–∞–ª—å–¥":
        await handle_buy_emerald(message)
        return

    m = re.match(r"^–∫—É–ø–∏—Ç—å\s+–ø–µ—Ä–∫\s+(.+)$", text_l)
    if m:
        code = m.group(1).strip()
        await handle_buy_perk(message, code)
        return

    # —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–æ—Ç: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ —Å—Å—ã–ª–∫–µ, —Ü–µ–Ω–∞ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ
    raw = message.text.strip()
    m = re.match(r'^–≤—ã—Å—Ç–∞–≤–∏—Ç—å\s+(.+?)\s+(\d+)\s*$', raw, flags=re.IGNORECASE | re.DOTALL)
    if m:
        link = m.group(1).strip()
        price = int(m.group(2))
        await handle_offer_create(message, link, price)
        return

    m = re.match(r"^–∫—É–ø–∏—Ç—å\s+(\d+)$", text_l)
    if m:
        await handle_offer_buy(message, int(m.group(1)))
        return

    m = re.match(r"^–∫—É–ø–∏—Ç—å\s+–ª–æ—Ç\s+(\d+)$", text_l)
    if m:
        await handle_offer_buy(message, int(m.group(1)))
        return

    m = re.match(r"^—Å–Ω—è—Ç—å\s+–ª–æ—Ç\s+(\d+)$", text_l)
    if m:
        await handle_offer_cancel(message, int(m.group(1)))
        return

    # –∫—Ä–∞–∂–∞
    if text_l in ("—É–∫—Ä–∞—Å—Ç—å", "—Å–≤–æ—Ä–æ–≤–∞—Ç—å") and message.reply_to_message:
        await handle_theft(message)
        return

    # —ç–∫–æ–Ω–æ–º–∏–∫–∞/—Å–µ–π—Ñ
    if text_l == "—Å–µ–π—Ñ":
        await handle_vault_stats(message)
        return

    # –¥–µ—Ä–∂–∞—Ç–µ–ª–∏ –ø–µ—Ä–∫–∞ / —Ä–µ–µ—Å—Ç—Ä
    m = re.match(r"^(?:—É –∫–æ–≥–æ –ø–µ—Ä–∫|–¥–µ—Ä–∂–∞—Ç–µ–ª–∏ –ø–µ—Ä–∫–∞)\s+(\S+)$", text_l)
    if m:
        await handle_perk_holders_list(message, m.group(1))
        return

    if text_l == "–ø–µ—Ä–∫–∏ —Ä–µ–µ—Å—Ç—Ä":
        await handle_perk_registry(message)
        return

    if text_l == "–∫–æ–Ω—Ü–µ—Ä—Ç":
        # —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö
        if message.chat.type not in ("group", "supergroup") or message.chat.id not in ALLOWED_CONCERT_CHATS:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ ¬´–∫–æ–Ω—Ü–µ—Ä—Ç¬ª –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–ª—É–±–Ω–æ–º —á–∞—Ç–µ.")
            return
        await handle_hero_of_day(message)
        return

    if text_l == "–≤—ã—Å—Ç—É–ø–∏—Ç—å":
        # —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö
        if message.chat.type not in ("group", "supergroup") or message.chat.id not in ALLOWED_CONCERT_CHATS:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ ¬´–≤—ã—Å—Ç—É–ø–∏—Ç—å¬ª –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–ª—É–±–Ω–æ–º —á–∞—Ç–µ.")
            return
        await handle_hero_concert(message)
        return

    if text_l == "–∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç":
        await _pin_paid(message, loud=False); return
    if text_l == "–∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç –≥—Ä–æ–º–∫–æ":
        await _pin_paid(message, loud=True); return

    # ======= –©–ï–î–†–û–°–¢–¨ (—Ç–æ–ª—å–∫–æ –ö—É—Ä–∞—Ç–æ—Ä, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ –õ–°, –∏ –≤ —á–∞—Ç–µ) =======
    if text_l.startswith("—â–µ–¥—Ä–æ—Å—Ç—å"):
        # —Ç–æ–ª—å–∫–æ –ö—É—Ä–∞—Ç–æ—Ä
        if author_id != KURATOR_ID:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ö—É—Ä–∞—Ç–æ—Ä—É.")
            return

        # —Å—Ç–∞—Ç—É—Å
        if text_l.strip() == "—â–µ–¥—Ä–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å":
            try:
                pts  = await get_generosity_points(message.from_user.id)
                mult = await get_generosity_mult_pct()
                thr  = await get_generosity_threshold()
                await message.reply(f"–©–µ–¥—Ä–æ—Å—Ç—å: –º–Ω–æ–∂–∏—Ç–µ–ª—å {mult}%, –ø–æ—Ä–æ–≥ {thr}, —É –≤–∞—Å –æ—á–∫–æ–≤: {pts}.")
            except Exception as e:
                await message.reply(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —â–µ–¥—Ä–æ—Å—Ç–∏: {e}")
            return

        # –æ—á–∫–∏ (reply = —á—å–∏-—Ç–æ, –∏–Ω–∞—á–µ ‚Äî —Å–≤–æ–∏)
        if text_l.strip() == "—â–µ–¥—Ä–æ—Å—Ç—å –æ—á–∫–∏":
            try:
                uid = message.reply_to_message.from_user.id if message.reply_to_message else message.from_user.id
                name = (message.reply_to_message.from_user.full_name
                        if message.reply_to_message else message.from_user.full_name)
                pts = await get_generosity_points(uid)
                await message.reply(f"–û—á–∫–∏ —â–µ–¥—Ä–æ—Å—Ç–∏ —É {html.escape(name)}: {pts}.")
            except Exception as e:
                await message.reply(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—á–∫–æ–≤: {e}")
            return

        # —â–µ–¥—Ä–æ—Å—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å <p>
        m = re.match(r"^—â–µ–¥—Ä–æ—Å—Ç—å\s+–º–Ω–æ–∂–∏—Ç–µ–ª—å\s+(\–¥+)\s*$", text_l)
        if m:
            v = int(m.group(1))
            await set_generosity_mult_pct(v)
            cur = await get_generosity_mult_pct()
            await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –ú–Ω–æ–∂–∏—Ç–µ–ª—å —â–µ–¥—Ä–æ—Å—Ç–∏: {cur}%.")
            return

        # —â–µ–¥—Ä–æ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥–∞ <N>
        m = re.match(r"^—â–µ–¥—Ä–æ—Å—Ç—å\s+–Ω–∞–≥—Ä–∞–¥–∞\s+(\–¥+)\s*$", text_l)
        if m:
            v = int(m.group(1))
            await set_generosity_threshold(v)
            cur = await get_generosity_threshold()
            await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –ü–æ—Ä–æ–≥ –Ω–∞–≥—Ä–∞–¥—ã —â–µ–¥—Ä–æ—Å—Ç–∏: {fmt_money(cur)}.")
            return

        # –æ–±–Ω—É–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É (reply)
        if text_l.strip() == "—â–µ–¥—Ä–æ—Å—Ç—å –æ–±–Ω—É–ª–∏—Ç—å" and message.reply_to_message:
            try:
                uid = message.reply_to_message.from_user.id
                pts = await _generosity_reset_points_for(uid)
                await message.reply(f"–û—á–∫–∏ —â–µ–¥—Ä–æ—Å—Ç–∏ –æ–±–Ω—É–ª–µ–Ω—ã. –°–ø–∏—Å–∞–Ω–æ: {pts}.")
            except Exception as e:
                await message.reply(f"–û—à–∏–±–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è: {e}")
            return

        # –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ
        if text_l.strip() == "—â–µ–¥—Ä–æ—Å—Ç—å –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
            try:
                total_users = 0
                total_pts = 0
                for uid in await get_known_users():
                    pts = await get_generosity_points(uid)
                    if pts > 0:
                        await insert_history(uid, "generosity_pay_points", pts, "reset_all")
                        total_pts += pts
                        total_users += 1
                await message.reply(f"–û–±–Ω—É–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}, —Å–ø–∏—Å–∞–Ω–æ –æ—á–∫–æ–≤: {total_pts}.")
            except Exception as e:
                await message.reply(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω—É–ª–µ–Ω–∏—è: {e}")
            return



    # ======= –ö–æ–º–∞–Ω–¥—ã —Å –∫–ª—é—á–æ–º =======
    user_has_key = (author_id == KURATOR_ID) or await has_key(author_id)

    if user_has_key:
        if re.match(r"^(–≤—Ä—É—á–∏—Ç—å|–≤—ã–¥–∞—Ç—å)\s+(-?\d+)$", text_l):
            await handle_vruchit(message)
            return
        if re.match(r"^(–≤–∑—ã—Å–∫–∞—Ç—å|–æ—Ç–Ω—è—Ç—å)\s+(-?\d+)$", text_l):
            await handle_otnyat(message, text_l, author_id)
            return
        if text_l == "–∫–∞—Ä–º–∞–Ω":
            await handle_kurator_karman(message)
            return

    # ======= –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –ö—É—Ä–∞—Ç–æ—Ä–∞ =======
    if author_id == KURATOR_ID:
        if text_l.startswith("–Ω–∞–∑–Ω–∞—á–∏—Ç—å ") and message.reply_to_message:
            await handle_naznachit(message)
            return
        if text_l == "—Å–Ω—è—Ç—å —Ä–æ–ª—å" and message.reply_to_message:
            await handle_snyat_rol(message)
            return
        if text_l == "–∫–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞" and message.reply_to_message:
            await handle_kluch(message)
            return
        if text_l == "—Å–Ω—è—Ç—å –∫–ª—é—á" and message.reply_to_message:
            await handle_snyat_kluch(message)
            return
        if text_l == "–æ–±–Ω—É–ª–∏—Ç—å –∫–ª—É–±":
            await asyncio.sleep(1)
            await handle_clear_db(message)
            return
        if text_l.startswith("–æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã"):
            await handle_obnulit_balansy(message)
            return
        if text_l.startswith("–æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å"):
            await handle_obnulit_balans(message)
            return
        if text_l.startswith("–¥–∞—Ä–æ–≤–∞—Ç—å ") and message.reply_to_message:
            code = text_l.split(" ", 1)[1].strip()
            if code in PERK_REGISTRY:
                await handle_grant_perk_universal(message, code)
                return
        if text_l.startswith("—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å ") and message.reply_to_message:
            code = text_l.split(" ", 1)[1].strip()
            if code in PERK_REGISTRY:
                await handle_revoke_perk_universal(message, code)
                return

        if text_l.startswith("–≤–∫–ª—é—á–∏—Ç—å —Å–µ–π—Ñ"):
            await handle_vault_enable(message)
            return

        if text_l.startswith("–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—Ñ"):
            await handle_vault_reset(message)
            return

        m = re.match(r"^–∂–∞–ª–æ–≤–∞–Ω–∏–µ\s+–±–∞–∑–∞\s+(\d+)$", text_l)
        if m:
            v = int(m.group(1))
            await set_stipend_base(v)
            cur = await get_stipend_base()
            await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –ë–∞–∑–∞ –∂–∞–ª–æ–≤–∞–Ω–∏—è: {fmt_money(cur)}.")
            return

        # –∂–∞–ª–æ–≤–∞–Ω–∏–µ –Ω–∞–¥–±–∞–≤–∫–∞ <N>
        m = re.match(r"^–∂–∞–ª–æ–≤–∞–Ω–∏–µ\s+–Ω–∞–¥–±–∞–≤–∫–∞\s+(\d+)$", text_l)
        if m:
            v = int(m.group(1))
            await set_stipend_bonus(v)
            cur = await get_stipend_bonus()
            await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –ù–∞–¥–±–∞–≤–∫–∞ –∫ –∂–∞–ª–æ–≤–∞–Ω–∏—é: {fmt_money(cur)}.")
            return

        # —Ü–µ–Ω–∞ –ø–æ—Å—Ç <N>
        m = re.match(r"^—Ü–µ–Ω–∞\s+–ø–æ—Å—Ç\s+(\d+)$", text_l)
        if m:
            v = int(m.group(1))
            await set_price_pin(v)
            cur = await get_price_pin()
            await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –¶–µ–Ω–∞ ¬´–∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç¬ª: {fmt_money(cur)}.")
            return

        # —Ü–µ–Ω–∞ –≥—Ä–æ–º–∫–∏–π –ø–æ—Å—Ç <N>
        m = re.match(r"^—Ü–µ–Ω–∞\s+–≥—Ä–æ–º–∫–∏–π\s+–ø–æ—Å—Ç\s+(\d+)$", text_l)
        if m:
            v = int(m.group(1))
            await set_price_pin_loud(v)
            cur = await get_price_pin_loud()
            await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –¶–µ–Ω–∞ ¬´–∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç –≥—Ä–æ–º–∫–æ¬ª: {fmt_money(cur)}.")
            return

        m = re.match(r"^—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\s+–∫–æ–¥\s+(\S+)\s+(\d+)\s*(.*)$", text_l)
        if m and author_id == KURATOR_ID:
            if message.chat.type != "private":
                await message.reply("–ó–∞–≥–∞–¥—ã–≤–∞—Ç—å –∫–æ–¥ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –õ–°. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É.")
                return

            word = m.group(1)
            prize = int(m.group(2))
            hint  = (m.group(3) or "").strip()
            target_chat_id = CLUB_CHAT_ID

            cur = await codeword_get_active(target_chat_id)
            if cur:
                await message.reply("–£–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞ –ö–û–î-–°–õ–û–í–û. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é.")
                return

            await codeword_set(target_chat_id, word.lower(), prize, KURATOR_ID)

            try:
                extra_hint = f"\n<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> {html.escape(hint)}" if hint else ""
                await message.bot.send_message(
                    target_chat_id,
                    "üß© <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ¬´–ö–û–î-–°–õ–û–í–û¬ª</b>\n\n"
                    f"–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ, –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ –ö—É—Ä–∞—Ç–æ—Ä–æ–º –∏ –ø–æ–ª—É—á–∏—Ç–µ {fmt_money(prize)}."
                    + extra_hint,
                    parse_mode="HTML"
                )
                await message.reply("–ö–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –Ø –æ–±—ä—è–≤–∏–ª –∏–≥—Ä—É –≤ –ö–ª—É–±–µ ‚Äî –∂–¥—ë–º —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —Ç–∞–º.")
            except Exception as e:
                await message.reply(
                    f"–ö–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –æ–±—ä—è–≤–∏—Ç—å –≤ –ö–ª—É–±–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ({e}). "
                    f"–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ CLUB_CHAT_ID."
                )
            return



        if text_l == "–æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–¥" and author_id == KURATOR_ID:
            target_chat_id = CLUB_CHAT_ID
            ok = await codeword_cancel_active(target_chat_id, KURATOR_ID)
            if ok:
                await message.reply("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                try:
                    await message.bot.send_message(target_chat_id, "üõë –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ö–û–î-–°–õ–û–í–û –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                except Exception:
                    pass
            else:
                await message.reply("–ê–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ –ö–ª—É–±–µ –Ω–µ—Ç.")
            return

        # —Å–∂–∏–≥–∞–Ω–∏–µ <bps>
        m = re.match(r"^—Å–∂–∏–≥–∞–Ω–∏–µ\s+(\d+)$", text_l)
        if m:
            await set_burn_bps(int(m.group(1)))
            cur = await get_burn_bps()
            await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –°–∂–∏–≥–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {fmt_percent_bps(cur)}.")
            return

        # —Ü–µ–Ω–∞ —ç–º–µ—Ä–∞–ª—å–¥ <N>
        m = re.match(r"^—Ü–µ–Ω–∞\s+—ç–º–µ—Ä–∞–ª—å–¥\s+(\d+)$", text_l)
        if m:
            v = int(m.group(1))
            await set_price_emerald(v)
            cur = await get_price_emerald()
            await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –¶–µ–Ω–∞ –≠–º–µ—Ä–∞–ª—å–¥–∞: {fmt_money(cur)}.")
            return

        # —Ü–µ–Ω–∞ –ø–µ—Ä–∫ <–∫–æ–¥> <N>
        m = re.match(r"^—Ü–µ–Ω–∞\s+–ø–µ—Ä–∫\s+(\S+)\s+(\d+)$", text_l)
        if m:
            code = m.group(1).strip().lower()
            v = int(m.group(2))
            if code not in PERK_REGISTRY:
                await message.reply("–¢–∞–∫–æ–≥–æ –ø–µ—Ä–∫–∞ –Ω–µ—Ç.")
                return
            await set_price_perk(code, v)
            cur = await get_price_perk(code)
            await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –¶–µ–Ω–∞ –ø–µ—Ä–∫–∞ ¬´{PERK_REGISTRY[code][1]}¬ª: {fmt_money(cur)}.")
            return

        # –º–Ω–æ–∂–∏—Ç–µ–ª—å <–∏–≥—Ä–∞> <X>
        m = re.match(r"^–º–Ω–æ–∂–∏—Ç–µ–ª—å\s+(–∫—É–±–∏–∫|–¥–∞—Ä—Ç—Å|–±–æ—É–ª–∏–Ω–≥|–∞–≤—Ç–æ–º–∞—Ç—ã)\s+(\d+)$", text_l)
        if m:
            game = m.group(1)
            x = int(m.group(2))
            await set_multiplier(game, x)
            await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è ¬´{game}¬ª: √ó{x}.")
            return

        # –∫–∞–∑–∏–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å
        if text_l in ("–∫–∞–∑–∏–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å", "–∫–∞–∑–∏–Ω–æ –∑–∞–∫—Ä—ã—Ç—å"):
            turn_on = text_l.endswith("–æ—Ç–∫—Ä—ã—Ç—å")
            await set_casino_on(turn_on)
            await message.reply("üé∞ –ö–∞–∑–∏–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ." if turn_on else "üé∞ –ö–∞–∑–∏–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")
            return

        # –∫—Ä–∞–∂–∞ <N>
        m = re.match(r"^–∫—Ä–∞–∂–∞\s+(\d+)$", text_l)
        if m:
            v = int(m.group(1))
            await set_income(v)
            cur = await get_income()
            await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –°—É–º–º–∞ —É–¥–∞—á–Ω–æ–π –∫—Ä–∞–∂–∏: {fmt_money(cur)}.")
            return

        # –ª–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∞ <N>
        m = re.match(r"^–ª–∏–º–∏—Ç\s+—Å—Ç–∞–≤–∫–∞\s+(\d+)$", text_l)
        if m:
            v = int(m.group(1))
            await set_limit_bet(v)
            await message.reply("üõ†Ô∏è –õ–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏ –æ—Ç–∫–ª—é—á—ë–Ω." if v == 0 else f"üõ†Ô∏è –õ–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏: {fmt_int(v)}.")
            return

        # –ª–∏–º–∏—Ç –¥–æ–∂–¥—å <N>
        m = re.match(r"^–ª–∏–º–∏—Ç\s+–¥–æ–∂–¥—å\s+(\d+)$", text_l)
        if m:
            v = int(m.group(1))
            await set_limit_rain(v)
            await message.reply("üõ†Ô∏è –õ–∏–º–∏—Ç –¥–æ–∂–¥—è –æ—Ç–∫–ª—é—á—ë–Ω." if v == 0 else f"üõ†Ô∏è –õ–∏–º–∏—Ç –¥–æ–∂–¥—è: {fmt_money(v)}.")
            return

        if t in ("–∫–æ–º–∞–Ω–¥—ã –∫—É—Ä–∞—Ç–æ—Ä–∞", "–º–æ–∏ –∫–æ–º–∞–Ω–¥—ã", "/–∫–æ–º–∞–Ω–¥—ã_–∫—É—Ä–∞—Ç–æ—Ä–∞"):
            await handle_commands_curator(message)
            return

        m = re.match(r"^—â–∏—Ç\s+—à–∞–Ω—Å\s+(\d+)\s*$", text_l)
        if m:
            p = int(m.group(1))
            await set_perk_shield_chance(p)
            cur = await get_perk_shield_chance()
            await message.reply(f"üõ°Ô∏è –®–∞–Ω—Å –ø–µ—Ä–∫–∞ ¬´–©–∏—Ç¬ª –æ–±–Ω–æ–≤–ª—ë–Ω: {cur}%")
            return

        m = re.match(r"^–∫—Ä—É–ø—å–µ\s+—à–∞–Ω—Å\s+(\d+)\s*$", text_l)
        if m:
            p = int(m.group(1))
            await set_perk_croupier_chance(p)
            cur = await get_perk_croupier_chance()
            await message.reply(f"üé≤ –®–∞–Ω—Å –ø–µ—Ä–∫–∞ ¬´–ö—Ä—É–ø—å–µ¬ª –æ–±–Ω–æ–≤–ª—ë–Ω: {cur}%")
            return

        m = re.match(r"^—Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø\s+—à–∞–Ω—Å\s+(\d+)\s*$", text_l)
        if m:
            p = int(m.group(1))
            await set_perk_philanthrope_chance(p)
            cur = await get_perk_philanthrope_chance()
            await message.reply(f"üéÅ –®–∞–Ω—Å –ø–µ—Ä–∫–∞ ¬´–§–∏–ª–∞–Ω—Ç—Ä–æ–ø¬ª –æ–±–Ω–æ–≤–ª—ë–Ω: {cur}%")
            return

        m = re.match(r"^–≤–µ–∑—É–Ω—á–∏–∫\s+—à–∞–Ω—Å\s+(\d+)\s*$", text_l)
        if m:
            p = int(m.group(1))
            await set_perk_lucky_chance(p)
            cur = await get_perk_lucky_chance()
            await message.reply(f"üçÄ –®–∞–Ω—Å –ø–µ—Ä–∫–∞ ¬´–í–µ–∑—É–Ω—á–∏–∫¬ª –æ–±–Ω–æ–≤–ª—ë–Ω: {cur}%")
            return


# ---------- –±–∞–∑–æ–≤—ã–µ –∫—É—Å–∫–∏ (—Ä–æ–ª—ã, —Ñ–æ—Ç–æ, —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ —Ç.–ø.) ----------
# === –ö—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–æ–ª–µ–π –∏ –∫–ª—é—á–∞ (—Ç–æ—á–Ω–æ –ø–æ–¥ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É) ===

async def handle_naznachit(message: types.Message):
    """
    –§–æ—Ä–º–∞—Ç:  –Ω–∞–∑–Ω–∞—á–∏—Ç—å "–†–æ–ª—å" –û–ø–∏—Å–∞–Ω–∏–µ
    –í–ê–ñ–ù–û: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ —Å—Ç—Ä–æ–≥–æ –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö, —ç–º–æ–¥–∑–∏ –≤ –∫–æ–º–∞–Ω–¥—É –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º.
    –†–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û reply (–Ω–∞ —Ç–æ–≥–æ, –∫–æ–º—É –Ω–∞–∑–Ω–∞—á–∞–µ–º).
    """
    if message.from_user.id != KURATOR_ID:
        return
    if not message.reply_to_message:
        await message.reply('–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞. –§–æ—Ä–º–∞—Ç: –Ω–∞–∑–Ω–∞—á–∏—Ç—å "–†–æ–ª—å" –û–ø–∏—Å–∞–Ω–∏–µ')
        return

    # –ü–∞—Ä—Å–∏–º –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–ö–°–¢–ê, –±–µ–∑ lower(), —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä/—Å–∏–º–≤–æ–ª—ã —Ä–æ–ª–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    raw = (message.text or "").strip()
    m = re.match(r'^\s*–Ω–∞–∑–Ω–∞—á–∏—Ç—å\s+"([^"]+)"\s+(.+)\s*$', raw, flags=re.DOTALL)
    if not m:
        await message.reply('–§–æ—Ä–º–∞—Ç: –Ω–∞–∑–Ω–∞—á–∏—Ç—å "–†–æ–ª—å" –û–ø–∏—Å–∞–Ω–∏–µ\n–ü—Ä–∏–º–µ—Ä: –Ω–∞–∑–Ω–∞—á–∏—Ç—å "–ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç" –õ—é–±–∏—Ç —Ç–æ–Ω–∫–∏–π —é–º–æ—Ä')
        return

    role_name = m.group(1).strip()
    role_desc = m.group(2).strip()

    target = message.reply_to_message.from_user
    # set_role –æ–∂–∏–¥–∞–µ—Ç (user_id, role, description)
    await set_role(target.id, role_name, role_desc)

    # –ü—Ä–µ–≤—å—é –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ, –∫–∞–∫ ¬´–º–æ—è —Ä–æ–ª—å¬ª/¬´—Ä–æ–ª—å¬ª
    preview = f"üé≠ *{role_name}*\n\n_{role_desc}_"
    await message.reply_to_message.reply(preview, parse_mode="Markdown")


async def handle_snyat_rol(message: types.Message):
    """
    –°–Ω–∏–º–∞–µ—Ç —Ä–æ–ª—å —É –∞–¥—Ä–µ—Å–∞—Ç–∞ (reply). –§–æ—Ç–æ —Ä–æ–ª–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º.
    """
    if message.from_user.id != KURATOR_ID:
        return
    if not message.reply_to_message:
        await message.reply("–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return

    target = message.reply_to_message.from_user
    # –°–±—Ä–æ—Å —Ä–æ–ª–∏: –∫–ª–∞–¥—ë–º None/None ‚Äî —á—Ç–µ–Ω–∏–µ ¬´–º–æ—è —Ä–æ–ª—å¬ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–∫–∞–∂–µ—Ç ¬´–Ω–µ –∑–Ω–∞—é¬ª
    await set_role(target.id, None, None)
    await message.reply_to_message.reply("–†–æ–ª—å —Å–Ω—è—Ç–∞.")


async def handle_kluch(message: types.Message):
    """
    –í—ã–¥–∞—Ç—å –∫–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞ (reply).
    –í–ª–∞–¥–µ–ª—å—Ü—ã –∫–ª—é—á–∞ –º–æ–≥—É—Ç: ¬´–≤—Ä—É—á–∏—Ç—å¬ª, ¬´–≤–∑—ã—Å–∫–∞—Ç—å/–æ—Ç–Ω—è—Ç—å¬ª, ¬´–∫–∞—Ä–º–∞–Ω¬ª.
    """
    if message.from_user.id != KURATOR_ID:
        return
    if not message.reply_to_message:
        await message.reply("–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return

    target = message.reply_to_message.from_user
    await grant_key(target.id)
    await message.reply_to_message.reply(f"üóùÔ∏è –ö–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞ –≤—ã–¥–∞–Ω {mention_html(target.id, target.full_name)}.", parse_mode="HTML")


async def handle_snyat_kluch(message: types.Message):
    """
    –°–Ω—è—Ç—å –∫–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞ (reply).
    """
    if message.from_user.id != KURATOR_ID:
        return
    if not message.reply_to_message:
        await message.reply("–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return

    target = message.reply_to_message.from_user
    await revoke_key(target.id)
    await message.reply_to_message.reply(f"üóùÔ∏è –ö–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞ —Å–Ω—è—Ç —Å {mention_html(target.id, target.full_name)}.", parse_mode="HTML")



async def handle_photo_command(message: types.Message):
    if message.from_user.id != KURATOR_ID:
        return
    if not (message.caption and message.photo):
        return
    text = message.caption.lower().strip()
    if text.startswith("—Ñ–æ—Ç–æ —Ä–æ–ª–∏") and message.reply_to_message:
        target_user_id = message.reply_to_message.from_user.id
        photo_id = message.photo[-1].file_id
        await set_role_image(target_user_id, photo_id)
        await message.reply("–§–æ—Ç–æ —Ä–æ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

async def handle_my_role(message: types.Message):
    author_id = message.from_user.id
    try:
        role_row = await get_role_with_image(author_id)
    except Exception:
        role_info = await get_role(author_id)
        role_row = (role_info.get("role"), role_info.get("description"), None) if role_info else None
    if role_row:
        role_name, role_desc, image_file_id = role_row
        text_resp = f"üé≠ *{role_name}*\n\n_{role_desc}_"
        if image_file_id:
            await message.reply_photo(photo=image_file_id, caption=text_resp, parse_mode="Markdown")
        else:
            if author_id == KURATOR_ID and os.path.exists("images/kurator.jpg"):
                try:
                    await message.reply_photo(photo=FSInputFile("images/kurator.jpg"), caption=text_resp, parse_mode="Markdown")
                except Exception:
                    await message.reply(text_resp, parse_mode="Markdown")
            else:
                await message.reply(text_resp, parse_mode="Markdown")
    else:
        await message.reply("–Ø –≤–∞—Å –Ω–µ —É–∑–Ω–∞—é.")

async def handle_who_role(message: types.Message):
    target_id = message.reply_to_message.from_user.id
    try:
        role_row = await get_role_with_image(target_id)
    except Exception:
        role_info = await get_role(target_id)
        role_row = (role_info.get("role"), role_info.get("description"), None) if role_info else None
    if role_row:
        role_name, role_desc, image_file_id = role_row
        text_resp = f"üé≠ *{role_name}*\n\n_{role_desc}_"
        if image_file_id:
            await message.reply_photo(photo=image_file_id, caption=text_resp, parse_mode="Markdown")
        else:
            await message.reply(text_resp, parse_mode="Markdown")
    else:
        await message.reply("–Ø –Ω–µ –∑–Ω–∞—é –∫—Ç–æ —ç—Ç–æ.")

async def handle_rating(message: types.Message):
    rows = await get_top_users(limit=10)
    if not rows:
        await message.reply("–ù–∏ —É –∫–æ–≥–æ –≤ –∫–ª—É–±–µ –Ω–µ—Ç –Ω—É–∞—Ä–æ–≤.")
        return
    lines = ["üí∞ <b>–ë–æ–≥–∞—Ç–µ–π—à–∏–µ —á–ª–µ–Ω—ã –ö–ª—É–±–∞ Le Cadeau Noir:</b>\n"]
    for i, (user_id, balance) in enumerate(rows, start=1):
        name = "–£—á–∞—Å—Ç–Ω–∏–∫"
        try:
            member = await message.bot.get_chat_member(message.chat.id, user_id)
            name = member.user.full_name or name
        except Exception:
            pass
        lines.append(f"{i}. {mention_html(user_id, name)} ‚Äî {fmt_money(balance)}")
    await message.reply("\n".join(lines), parse_mode="HTML")

async def handle_club_members(message: types.Message):
    rows = await get_all_roles()
    if not rows:
        await message.reply("–ü–æ–∫–∞ —á—Ç–æ –≤ –∫–ª—É–±–µ –ø—É—Å—Ç–æ.")
        return
    lines = ["üé≠ <b>–ß–ª–µ–Ω—ã –ö–ª—É–±–∞ Le Cadeau Noir:</b>\n"]
    for user_id, role in rows:
        name = "–£—á–∞—Å—Ç–Ω–∏–∫"
        try:
            member = await message.bot.get_chat_member(message.chat.id, user_id)
            name = member.user.full_name or name
        except Exception:
            pass
        mention = mention_html(user_id, name)
        lines.append(f"{mention} ‚Äî <b>{role}</b>")
    await message.reply("\n".join(lines), parse_mode="HTML")

async def handle_key_holders_cmd(message: types.Message):
    user_ids = await get_key_holders()
    if not user_ids:
        await message.reply("–ü–æ–∫–∞ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –∫–ª—é—á–∞.")
        return
    lines = ["üóùÔ∏è <b>–•—Ä–∞–Ω–∏—Ç–µ–ª–∏ –∫–ª—é—á–∞:</b>\n"]
    for user_id in user_ids:
        name = "–£—á–∞—Å—Ç–Ω–∏–∫"
        try:
            member = await message.bot.get_chat_member(message.chat.id, user_id)
            name = member.user.full_name or name
        except Exception:
            pass
        lines.append(f"{mention_html(user_id, name)}")
    await message.reply("\n".join(lines), parse_mode="HTML")

async def handle_clear_db(message: types.Message):
    if message.from_user.id != KURATOR_ID:
        await message.reply("–¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω—É–ª–∏—Ç—å –∫–ª—É–±.")
        return
    try:
        await message.reply("üóë–ö–ª—É–± –æ–±–Ω—É–ª—è–µ—Ç—Å—è...")
        if os.path.exists(DB_PATH):
            os.remove(DB_PATH)
        await message.answer("üí¢–ö–æ–¥ –ê—Ä–º–∞–≥–µ–¥–æ–Ω. –ö–ª—É–± –æ–±–Ω—É–ª–µ–Ω. –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —è –∏ –≤—ã, –ö—É—Ä–∞—Ç–æ—Ä.")
        os.execv(sys.executable, [sys.executable] + sys.argv)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏: {e}")

async def handle_obnulit_balans(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ß—Ç–æ–±—ã –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return
    user_id = message.reply_to_message.from_user.id
    await reset_user_balance(user_id)
    await message.reply("‚úÖ–ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–±–Ω—É–ª—ë–Ω.")

async def handle_obnulit_balansy(message: types.Message):
    await reset_all_balances()
    await message.reply("‚úÖ–í—Å–µ –±–∞–ª–∞–Ω—Å—ã –æ–±–Ω—É–ª–µ–Ω—ã.")

# ----------- –¥–µ–Ω—å–≥–∏: –≤—Ä—É—á–∏—Ç—å / –≤–∑—ã—Å–∫–∞—Ç—å / –ø–µ—Ä–µ–¥–∞—Ç—å / –¥–æ–∂–¥—å -----------

async def _get_vault_room() -> int:
    stats = await get_economy_stats()
    if not stats:
        return -1  # —Å–µ–π—Ñ –Ω–µ –≤–∫–ª—é—á—ë–Ω
    return stats["vault"]

async def handle_vruchit(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–≤—Ä—É—á–∏—Ç—å 5' (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞)")
        return
    m = re.match(r"(?:–≤—Ä—É—á–∏—Ç—å|–≤—ã–¥–∞—Ç—å)\s+(-?\d+)", message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–≤—Ä—É—á–∏—Ç—å|–≤—ã–¥–∞—Ç—å 5'")
        return
    amount = int(m.group(1))
    if amount <= 0:
        await message.reply("–Ø –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å –º–∏–Ω—É—Å.")
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–π—Ñ–∞
    room = await _get_vault_room()
    if room == -1:
        await message.reply("–°–µ–π—Ñ –µ—â—ë –Ω–µ –≤–∫–ª—é—á—ë–Ω. –ö–æ–º–∞–Ω–¥–∞: '–≤–∫–ª—é—á–∏—Ç—å —Å–µ–π—Ñ <CAP>' (–¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞).")
        return
    if amount > room:
        await message.reply(f"–í —Å–µ–π—Ñ–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {fmt_money(room)}")
        return

    recipient = message.reply_to_message.from_user
    await change_balance(recipient.id, amount, "–≤—ã–¥–∞—á–∞ –∏–∑ —Å–µ–π—Ñ–∞", message.from_user.id)
    await message.reply(f"üßÆ–Ø –≤—ã–¥–∞–ª {fmt_money(amount)} {mention_html(recipient.id, recipient.full_name)}", parse_mode="HTML")

async def handle_otnyat(message: types.Message, text: str, author_id: int):
    if not message.reply_to_message:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–≤–∑—ã—Å–∫–∞—Ç—å 3' (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞)")
        return
    m = re.match(r"(?:–≤–∑—ã—Å–∫–∞—Ç—å|–æ—Ç–Ω—è—Ç—å)\s+(-?\d+)", text, re.IGNORECASE)
    if not m:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–≤–∑—ã—Å–∫–∞—Ç—å|–æ—Ç–Ω—è—Ç—å 3'")
        return
    amount = int(m.group(1))
    if amount <= 0:
        await message.reply("–Ø –Ω–µ –º–æ–≥—É –æ—Ç–Ω—è—Ç—å –º–∏–Ω—É—Å.")
        return
    recipient = message.reply_to_message.from_user
    current_balance = await get_balance(recipient.id)
    if amount > current_balance:
        await message.reply(f"–£ {html.escape(recipient.full_name)} –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω—É–∞—Ä–æ–≤. –ë–∞–ª–∞–Ω—Å: {fmt_money(current_balance)}")
        return
    await change_balance(recipient.id, -amount, "–≤–∑—ã—Å–∫–∞–Ω–∏–µ –≤ —Å–µ–π—Ñ", author_id)
    await message.reply(f"üßÆ–Ø –≤–∑—ã—Å–∫–∞–ª {fmt_money(amount)} —É {mention_html(recipient.id, recipient.full_name)}", parse_mode="HTML")

async def handle_peredat(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ß—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∞—Ä—ã, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: '–ø–µ—Ä–µ–¥–∞—Ç—å 10'")
        return
    m = re.match(r"–ø–µ—Ä–µ–¥–∞—Ç—å\s+(\d+)", message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–ø–µ—Ä–µ–¥–∞—Ç—å 10'")
        return
    amount = int(m.group(1))
    if amount <= 0:
        await message.reply("–Ø –Ω–µ –º–æ–≥—É –ø–µ—Ä–µ–¥–∞—Ç—å –º–∏–Ω—É—Å.")
        return
    giver_id = message.from_user.id
    recipient = message.reply_to_message.from_user
    recipient_id = recipient.id
    if giver_id == recipient_id:
        await message.reply("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∞—Ä—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return
    balance = await get_balance(giver_id)
    if amount > balance:
        await message.reply(f"–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –ë–∞–ª–∞–Ω—Å: {fmt_money(balance)}")
        return
    await change_balance(giver_id, -amount, "–ø–µ—Ä–µ–¥–∞—á–∞", giver_id)
    await change_balance(recipient_id, amount, "–ø–µ—Ä–µ–¥–∞—á–∞", giver_id)
    pct = await get_generosity_mult_pct()
    pts = (amount * pct) // 100
    await add_generosity_points(giver_id, pts, "transfer")
    payout = await generosity_try_payout(giver_id)
    if payout > 0:
        await message.reply(f"üéÅ –ë–æ–Ω—É—Å —â–µ–¥—Ä–æ—Å—Ç–∏: +{fmt_money(payout)}")
    await message.reply(
        f"üí∏–Ø –ø–µ—Ä–µ–¥–∞–ª {fmt_money(amount)} –æ—Ç {mention_html(giver_id, message.from_user.full_name)} –∫ {mention_html(recipient_id, recipient.full_name)}",
        parse_mode="HTML"
    )

async def handle_dozhd(message: types.Message):
    m = re.match(r"^–¥–æ–∂–¥—å\s+(\d+)$", message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–¥–æ–∂–¥—å 10'")
        return
    total = int(m.group(1))
    if total < 5:
        await message.reply("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ–∂–¥—å ‚Äî 5 –Ω—É–∞—Ä–æ–≤.")
        return

    # –ª–∏–º–∏—Ç –¥–æ–∂–¥—è
    max_rain = await get_limit_rain()
    if max_rain and total > max_rain:
        await message.reply(f"–õ–∏–º–∏—Ç –¥–æ–∂–¥—è: –Ω–µ –±–æ–ª–µ–µ {fmt_money(max_rain)} –∑–∞ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É.")
        return

    giver_id = message.from_user.id
    bal = await get_balance(giver_id)
    if total > bal:
        await message.reply(f"–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –ë–∞–ª–∞–Ω—Å: {fmt_money(bal)}")
        return
    candidate_ids = [uid for uid in await get_known_users() if uid != giver_id]
    eligible = []
    for uid in candidate_ids:
        try:
            member = await message.bot.get_chat_member(message.chat.id, uid)
            if member.status in ("left", "kicked"):
                continue
            if getattr(member.user, "is_bot", False):
                continue
            name = member.user.full_name or "–£—á–∞—Å—Ç–Ω–∏–∫"
            eligible.append((uid, name))
        except Exception:
            continue
    if not eligible:
        await message.reply("–ù–µ–∫–æ–≥–æ –Ω–∞–º–æ—á–∏—Ç—å ‚Äî —è –Ω–µ –≤–∏–∂—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    random.shuffle(eligible)
    recipients = eligible[:5]
    n = len(recipients)
    base = total // n
    rest = total % n
    per_user = [base + (1 if i < rest else 0) for i in range(n)]

    await change_balance(giver_id, -total, "–¥–æ–∂–¥—å", giver_id)
    for (uid, _name), amt in zip(recipients, per_user):
        if amt > 0:
            await change_balance(uid, amt, "–¥–æ–∂–¥—å", giver_id)

    # NEW: ¬´–§–∏–ª–∞–Ω—Ç—Ä–æ–ø¬ª ‚Äî 15% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å —à–µ—Å—Ç–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å —Ç–∞–∫–æ–π –∂–µ –¥–æ–ª–µ–π (–∏–∑ —Å–µ–π—Ñ–∞)
    giver_perks = await get_perks(giver_id)
    base_share = per_user[0] if per_user else 0
    added_sixth = False
    extra_lines = []

    if "—Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø" in giver_perks and base_share > 0 and chance(15):
        # –Ω–∞–π–¥—ë–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –Ω–µ –∏–∑ —Ç–µ–∫—É—â–∏—Ö 5
        taken_ids = {uid for uid, _ in recipients}
        extra_pool = [(uid, name) for uid, name in eligible if uid not in taken_ids]
        if extra_pool:
            sixth_uid, sixth_name = random.choice(extra_pool)
            await change_balance(sixth_uid, base_share, "–¥–æ–∂–¥—å_—Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø", giver_id)
            extra_lines.append(f"{mention_html(sixth_uid, sixth_name)} ‚Äî –ø–æ–ª—É—á–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {fmt_money(base_share)} (—Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø)")
            added_sixth = True

    # NEW: ¬´–í–µ–∑—É–Ω—á–∏–∫¬ª ‚Äî 33% —à–∞–Ω—Å —Å—Ç–∞—Ç—å —à–µ—Å—Ç—ã–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø–∞)
    if not added_sixth:
        # —Å–æ–±–µ—Ä—ë–º –≤—Å–µ—Ö —Å –ø–µ—Ä–∫–æ–º ¬´–≤–µ–∑—É–Ω—á–∏–∫¬ª, –∫—Ç–æ –Ω–µ –≤ –ø—è—Ç—ë—Ä–∫–µ
        lucky_pool = []
        taken_ids = {uid for uid, _ in recipients}
        for uid, name in eligible:
            if uid in taken_ids:
                continue
            user_perks = await get_perks(uid)
            if "–≤–µ–∑—É–Ω—á–∏–∫" in user_perks and chance(33):
                lucky_pool.append((uid, name))
        if lucky_pool and base_share > 0:
            lucky_uid, lucky_name = random.choice(lucky_pool)
            await change_balance(lucky_uid, base_share, "–¥–æ–∂–¥—å_–≤–µ–∑—É–Ω—á–∏–∫", giver_id)
            extra_lines.append(f"{mention_html(lucky_uid, lucky_name)} ‚Äî —É–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å {fmt_money(base_share)}")

    breakdown = [
        f"{mention_html(uid, name)} ‚Äî –Ω–∞–º–æ–∫ –Ω–∞ {fmt_money(amt)}"
        for (uid, name), amt in zip(recipients, per_user) if amt > 0
    ]
    if extra_lines:
        breakdown.extend(extra_lines)

    breakdown = [
        f"{mention_html(uid, name)} ‚Äî –Ω–∞–º–æ–∫ –Ω–∞ {fmt_money(amt)}"
        for (uid, name), amt in zip(recipients, per_user) if amt > 0
    ]
    pct = await get_generosity_mult_pct()
    pts = (total * pct) // 100
    await add_generosity_points(giver_id, pts, "rain")
    payout = await generosity_try_payout(giver_id)
    if payout > 0:
        await message.reply(f"üéÅ –ë–æ–Ω—É—Å —â–µ–¥—Ä–æ—Å—Ç–∏: +{fmt_money(payout)}")
    await message.reply("üåß –ü—Ä–æ—à—ë–ª –¥–æ–∂–¥—å. –ù–∞–º–æ–∫–ª–∏: " + ", ".join(breakdown), parse_mode="HTML")

# ------------- –∏–≥—Ä—ã (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∫—É–±–∏–∫, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é) -------------

async def _precheck_and_reserve_bet(message: types.Message, amount: int, game_tag: str, win_mult: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∏ + –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Å—ë –æ–∫ –∏ —Å—Ç–∞–≤–∫–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞."""
    # –∫–∞–∑–∏–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if not await get_casino_on():
        await message.reply("üé∞ –ö–∞–∑–∏–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")
        return False

    if amount <= 0:
        await message.reply("–Ø –Ω–µ –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É.")
        return False

    # –ª–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏
    max_bet = await get_limit_bet()
    if max_bet and amount > max_bet:
        await message.reply(f"–õ–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏: –Ω–µ –±–æ–ª–µ–µ {fmt_money(max_bet)}.")
        return False

    gambler_id = message.from_user.id
    balance = await get_balance(gambler_id)
    if amount > balance:
        await message.reply(f"üîç–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –ë–∞–ª–∞–Ω—Å: {fmt_money(balance)}")
        return False

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–π—Ñ–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –≤—ã–ø–ª–∞—Ç—É
    room = await _get_vault_room()
    if room == -1:
        await message.reply("–°–µ–π—Ñ –µ—â—ë –Ω–µ –≤–∫–ª—é—á—ë–Ω.")
        return False

    potential = amount * win_mult
    if potential > room:
        await message.reply("–ö–∞–∑–∏–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ –Ω–∞ –ø–µ—Ä–µ—É—á—ë—Ç ‚Äî –≤ —Å–µ–π—Ñ–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–∞–∫–æ–π –≤—ã–ø–ª–∞—Ç—ã.")
        return False

    # –ú–û–ú–ï–ù–¢–ê–õ–¨–ù–û —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É (—Ä–µ–∑–µ—Ä–≤)
    await change_balance(gambler_id, -amount, f"—Å—Ç–∞–≤–∫–∞ (—Ä–µ–∑–µ—Ä–≤) {game_tag}", gambler_id)
    return True


async def handle_kubik(message: types.Message):
    m = re.match(r"^\s*—Å—Ç–∞–≤–ª—é\s+(\d+)\s+–Ω–∞\s+(?:üé≤|–∫—É–±–∏–∫)\s*$", message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply("–ü—Ä–∏–º–µ—Ä: ¬´—Å—Ç–∞–≤–ª—é 10 –Ω–∞ üé≤|–∫—É–±–∏–∫¬ª")
        return
    amount = int(m.group(1))
    user_id = message.from_user.id
    lock = get_bet_lock(user_id)

    if lock.locked():
        await message.reply("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞–≤–∫–∏.")
        return

    async with lock:
        mults = await get_multipliers()
        win_mult = mults["dice"]

        # –ø—Ä–æ–≤–µ—Ä–∫–∏ + –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
        ok = await _precheck_and_reserve_bet(message, amount, "(–∫—É–±–∏–∫)", win_mult)
        if not ok:
            return

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é ‚Äî –µ—Å–ª–∏ —É–ø–∞–¥—ë—Ç, –≤–µ—Ä–Ω—ë–º —Å—Ç–∞–≤–∫—É
        try:
            sent: types.Message = await message.answer_dice(emoji="üé≤")
        except Exception:
            await change_balance(user_id, amount, "—Ä–µ—Ñ–∞–Ω–¥ —Å—Ç–∞–≤–∫–∏ (–æ—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—É–±–∏–∫)", user_id)
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫. –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")
            return

        roll_value = sent.dice.value  # 1..6
        await asyncio.sleep(3.5)

        if roll_value == 6:
            await change_balance(user_id, amount * win_mult, "—Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä—ã—à (–∫—É–±–∏–∫)", user_id)
            await message.reply(
                f"üéâ–§–æ—Ä—Ç—É–Ω–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, {mention_html(user_id, message.from_user.full_name)}. "
                f"–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {fmt_money(amount * win_mult)}",
                parse_mode="HTML"
            )
        else:
            # –ü—Ä–æ–∏–≥—Ä—ã—à: —Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞ —Ä–∞–Ω–µ–µ, –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º
            await message.reply(
                f"ü™¶–°—Ç–∞–≤–∫–∏ –ø–æ–≥—É–±—è—Ç –≤–∞—Å, {mention_html(user_id, message.from_user.full_name)}. "
                f"–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {fmt_money(amount)}.",
                parse_mode="HTML"
            )
            # NEW: ¬´–ö—Ä—É–ø—å–µ¬ª ‚Äî 15% —à–∞–Ω—Å –≤–µ—Ä–Ω—É—Ç—å 50% —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            user_perks = await get_perks(user_id)
            if "–∫—Ä—É–ø—å–µ" in user_perks and chance(15):
                refund = amount // 2
                if refund > 0:
                    await change_balance(user_id, refund, "–∫—Ä—É–ø—å–µ_—Ä–µ—Ñ–∞–Ω–¥(–∫—É–±–∏–∫)", user_id)
                    await message.reply(f"üé© –ö—Ä—É–ø—å–µ –ø–æ–∂–∞–ª–µ–ª –≤–∞—Å –∏ –≤–µ—Ä–Ω—É–ª {fmt_money(refund)}.")


async def handle_darts(message: types.Message):
    m = re.match(r"^\s*—Å—Ç–∞–≤–ª—é\s+(\d+)\s+–Ω–∞\s+(?:üéØ|–¥–∞—Ä—Ç—Å)\s*$", message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply("–ü—Ä–∏–º–µ—Ä: ¬´—Å—Ç–∞–≤–ª—é 10 –Ω–∞ üéØ|–¥–∞—Ä—Ç—Å¬ª")
        return
    amount = int(m.group(1))
    user_id = message.from_user.id
    lock = get_bet_lock(user_id)

    if lock.locked():
        await message.reply("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞–≤–∫–∏.")
        return

    async with lock:
        mults = await get_multipliers()
        win_mult = mults["darts"]

        ok = await _precheck_and_reserve_bet(message, amount, "(–¥–∞—Ä—Ç—Å)", win_mult)
        if not ok:
            return

        try:
            sent: types.Message = await message.answer_dice(emoji="üéØ")
        except Exception:
            await change_balance(user_id, amount, "—Ä–µ—Ñ–∞–Ω–¥ —Å—Ç–∞–≤–∫–∏ (–æ—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–∞—Ä—Ç—Å)", user_id)
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –±—Ä–æ—Å–∏—Ç—å –¥—Ä–æ—Ç–∏–∫. –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")
            return

        roll_value = sent.dice.value  # 1..6
        await asyncio.sleep(3.0)

        if roll_value == 6:  # –±—É–ª–ª—Å–∞–π
            await change_balance(user_id, amount * win_mult, "—Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä—ã—à (–¥–∞—Ä—Ç—Å)", user_id)
            await message.reply(
                f"üéØ –ú–µ—Ç–∫–æ! {mention_html(user_id, message.from_user.full_name)} –ø–æ–ª—É—á–∞–µ—Ç {fmt_money(amount * win_mult)}",
                parse_mode="HTML"
            )
        else:
            await message.reply(
                f"üôà –ù–µ –ø–æ–ø–∞–ª. {mention_html(user_id, message.from_user.full_name)} —Ç–µ—Ä—è–µ—Ç {fmt_money(amount)}.",
                parse_mode="HTML"
            )
            # NEW: ¬´–ö—Ä—É–ø—å–µ¬ª ‚Äî 15% —à–∞–Ω—Å –≤–µ—Ä–Ω—É—Ç—å 50% —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            user_perks = await get_perks(user_id)
            if "–∫—Ä—É–ø—å–µ" in user_perks and chance(15):
                refund = amount // 2
                if refund > 0:
                    await change_balance(user_id, refund, "–∫—Ä—É–ø—å–µ_—Ä–µ—Ñ–∞–Ω–¥(–∫—É–±–∏–∫)", user_id)
                    await message.reply(f"üé© –ö—Ä—É–ø—å–µ –ø–æ–∂–∞–ª–µ–ª –≤–∞—Å –∏ –≤–µ—Ä–Ω—É–ª {fmt_money(refund)}.")


async def handle_bowling(message: types.Message):
    m = re.match(r"^\s*—Å—Ç–∞–≤–ª—é\s+(\d+)\s+–Ω–∞\s+(?:üé≥|–±–æ—É–ª–∏–Ω–≥)\s*$", message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply("–ü—Ä–∏–º–µ—Ä: ¬´—Å—Ç–∞–≤–ª—é 10 –Ω–∞ üé≥|–±–æ—É–ª–∏–Ω–≥¬ª")
        return
    amount = int(m.group(1))
    user_id = message.from_user.id
    lock = get_bet_lock(user_id)

    if lock.locked():
        await message.reply("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞–≤–∫–∏.")
        return

    async with lock:
        mults = await get_multipliers()
        win_mult = mults["bowling"]

        ok = await _precheck_and_reserve_bet(message, amount, "(–±–æ—É–ª–∏–Ω–≥)", win_mult)
        if not ok:
            return

        try:
            sent: types.Message = await message.answer_dice(emoji="üé≥")
        except Exception:
            await change_balance(user_id, amount, "—Ä–µ—Ñ–∞–Ω–¥ —Å—Ç–∞–≤–∫–∏ (–æ—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –±–æ—É–ª–∏–Ω–≥)", user_id)
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—É–ª–∏–Ω–≥. –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")
            return

        roll_value = sent.dice.value  # 1..6
        await asyncio.sleep(3.0)

        if roll_value == 6:  # —Å—Ç—Ä–∞–π–∫
            await change_balance(user_id, amount * win_mult, "—Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä—ã—à (–±–æ—É–ª–∏–Ω–≥)", user_id)
            await message.reply(
                f"üé≥ –°—Ç—Ä–∞–π–∫! {mention_html(user_id, message.from_user.full_name)} –ø–æ–ª—É—á–∞–µ—Ç {fmt_money(amount * win_mult)}",
                parse_mode="HTML"
            )
        else:
            await message.reply(
                f"üí® –ú–∏–º–æ –∫–µ–≥–ª–µ–π. {mention_html(user_id, message.from_user.full_name)} —Ç–µ—Ä—è–µ—Ç {fmt_money(amount)}.",
                parse_mode="HTML"
            )
            # NEW: ¬´–ö—Ä—É–ø—å–µ¬ª ‚Äî 15% —à–∞–Ω—Å –≤–µ—Ä–Ω—É—Ç—å 50% —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            user_perks = await get_perks(user_id)
            if "–∫—Ä—É–ø—å–µ" in user_perks and chance(15):
                refund = amount // 2
                if refund > 0:
                    await change_balance(user_id, refund, "–∫—Ä—É–ø—å–µ_—Ä–µ—Ñ–∞–Ω–¥(–∫—É–±–∏–∫)", user_id)
                    await message.reply(f"üé© –ö—Ä—É–ø—å–µ –ø–æ–∂–∞–ª–µ–ª –≤–∞—Å –∏ –≤–µ—Ä–Ω—É–ª {fmt_money(refund)}.")



async def handle_slots(message: types.Message):
    m = re.match(r"^\s*—Å—Ç–∞–≤–ª—é\s+(\d+)\s+–Ω–∞\s+(?:üé∞|–∞–≤—Ç–æ–º–∞—Ç—ã|—Å–ª–æ—Ç—ã)\s*$", message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply("–ü—Ä–∏–º–µ—Ä: ¬´—Å—Ç–∞–≤–ª—é 10 –Ω–∞ üé∞|–∞–≤—Ç–æ–º–∞—Ç—ã¬ª")
        return
    amount = int(m.group(1))
    user_id = message.from_user.id
    lock = get_bet_lock(user_id)

    if lock.locked():
        await message.reply("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞–≤–∫–∏.")
        return

    async with lock:
        mults = await get_multipliers()
        win_mult = mults["slots"]

        ok = await _precheck_and_reserve_bet(message, amount, "(–∞–≤—Ç–æ–º–∞—Ç—ã)", win_mult)
        if not ok:
            return

        try:
            sent: types.Message = await message.answer_dice(emoji="üé∞")
        except Exception:
            await change_balance(user_id, amount, "—Ä–µ—Ñ–∞–Ω–¥ —Å—Ç–∞–≤–∫–∏ (–æ—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç—ã)", user_id)
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É. –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")
            return

        roll_value = sent.dice.value  # —É Telegram 1..64
        await asyncio.sleep(3.2)

        if roll_value == 64:  # –¥–∂–µ–∫–ø–æ—Ç (—Ç—Ä–∏ —Å–µ–º—ë—Ä–∫–∏)
            await change_balance(user_id, amount * win_mult, "—Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä—ã—à (–∞–≤—Ç–æ–º–∞—Ç—ã)", user_id)
            await message.reply(
                f"üé∞ –î–∂–µ–∫–ø–æ—Ç! {mention_html(user_id, message.from_user.full_name)} –ø–æ–ª—É—á–∞–µ—Ç {fmt_money(amount * win_mult)}",
                parse_mode="HTML"
            )
        else:
            await message.reply(
                f"üçí –ù–µ –ø–æ–≤–µ–∑–ª–æ. {mention_html(user_id, message.from_user.full_name)} —Ç–µ—Ä—è–µ—Ç {fmt_money(amount)}.",
                parse_mode="HTML"
            )
            # NEW: ¬´–ö—Ä—É–ø—å–µ¬ª ‚Äî 15% —à–∞–Ω—Å –≤–µ—Ä–Ω—É—Ç—å 50% —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            user_perks = await get_perks(user_id)
            if "–∫—Ä—É–ø—å–µ" in user_perks and chance(15):
                refund = amount // 2
                if refund > 0:
                    await change_balance(user_id, refund, "–∫—Ä—É–ø—å–µ_—Ä–µ—Ñ–∞–Ω–¥(–∫—É–±–∏–∫)", user_id)
                    await message.reply(f"üé© –ö—Ä—É–ø—å–µ –ø–æ–∂–∞–ª–µ–ª –≤–∞—Å –∏ –≤–µ—Ä–Ω—É–ª {fmt_money(refund)}.")



# ------------- –ø–µ—Ä–∫–∏: –º–æ–∏/—á—É–∂–∏–µ, –¥–∞—Ä–æ–≤–∞—Ç—å/—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å, –ó–ü, –≤–æ—Ä -------------

async def handle_my_perks(message: types.Message):
    perk_codes = await get_perks(message.from_user.id)
    await message.reply(render_perks(perk_codes))

async def handle_perks_of(message: types.Message):
    target = message.reply_to_message.from_user
    perk_codes = await get_perks(target.id)
    if not perk_codes:
        await message.reply(f"–£ {target.full_name} –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä–∫–æ–≤.")
        return
    lines = [f"–ü–µ—Ä–∫–∏ {mention_html(target.id, target.full_name)}:"]
    items = []
    for code in perk_codes:
        meta = PERK_REGISTRY.get(code)
        if meta:
            emoji, title = meta
            items.append((title.lower(), f"{emoji} {title}"))
        else:
            items.append((code, f"‚Ä¢ {code}"))
    for _, line in sorted(items):
        lines.append(line)
    await message.reply("\n".join(lines), parse_mode="HTML")

async def handle_grant_perk_universal(message: types.Message, code: str):
    if not message.reply_to_message:
        await message.reply("–î–∞—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∫ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return
    target = message.reply_to_message.from_user
    perks = await get_perks(target.id)
    emoji, title = PERK_REGISTRY.get(code, ("", code))
    if code in perks:
        await message.reply(f"–£ {mention_html(target.id, target.full_name)} —É–∂–µ –µ—Å—Ç—å ¬´{title}¬ª.", parse_mode="HTML")
        return
    await grant_perk(target.id, code)
    await message.reply(f"–ü–µ—Ä–∫ ¬´{title}¬ª –¥–∞—Ä–æ–≤–∞–Ω {mention_html(target.id, target.full_name)}.", parse_mode="HTML")

async def handle_revoke_perk_universal(message: types.Message, code: str):
    if not message.reply_to_message:
        await message.reply("–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –ø–µ—Ä–∫ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return
    target = message.reply_to_message.from_user
    perks = await get_perks(target.id)
    emoji, title = PERK_REGISTRY.get(code, ("", code))
    if code not in perks:
        await message.reply(f"–£ {mention_html(target.id, target.full_name)} –Ω–µ—Ç –ø–µ—Ä–∫–∞ ¬´{title}¬ª.", parse_mode="HTML")
        return
    await revoke_perk(target.id, code)
    await message.reply(f"–ü–µ—Ä–∫ ¬´{title}¬ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω —É {mention_html(target.id, target.full_name)}.", parse_mode="HTML")

async def handle_perk_holders_list(message: types.Message, code_raw: str):
    code = code_raw.strip().lower()

    # 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π –ø–µ—Ä–∫ –≤–æ–æ–±—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if code not in PERK_REGISTRY:
        available = ", ".join(sorted(PERK_REGISTRY.keys()))
        await message.reply(f"–¢–∞–∫–æ–≥–æ –ø–µ—Ä–∫–∞ –Ω–µ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã: {available}")
        return

    emoji, title = PERK_REGISTRY[code]

    # 2) —Å–æ–±–∏—Ä–∞–µ–º –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π
    holders = await get_perk_holders(code)
    if not holders:
        await message.reply(f"{emoji} –ù–∏–∫—Ç–æ –ø–æ–∫–∞ –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç –ø–µ—Ä–∫–æ–º ¬´{title}¬ª.")
        return

    # 3) –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
    lines = [f"{emoji} –û–±–ª–∞–¥–∞—Ç–µ–ª–∏ –ø–µ—Ä–∫–∞ ¬´{title}¬ª:"]

    for uid in holders:
        name = "–£—á–∞—Å—Ç–Ω–∏–∫"
        try:
            member = await message.bot.get_chat_member(message.chat.id, uid)
            name = member.user.full_name or name
        except Exception:
            pass
        lines.append(f"‚Ä¢ {mention_html(uid, name)}")

    await message.reply("\n".join(lines), parse_mode="HTML")



async def handle_perk_registry(message: types.Message):
    summary = await get_perks_summary()  # —Å–ø–∏—Å–æ–∫ [(code, count)]
    if not summary:
        await message.reply("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–ª –ø–µ—Ä–∫–æ–≤.")
        return

    lines = ["–°–≤–æ–¥–∫–∞ –ø–æ –ø–µ—Ä–∫–∞–º:"]
    for code, cnt in summary:
        emoji, title = PERK_REGISTRY.get(code, ("", code))
        nice = f"{emoji} {title}".strip()
        lines.append(f"‚Ä¢ {nice} ‚Äî {cnt}")

    await message.reply("\n".join(lines))


async def handle_stipend_claim(message: types.Message):
    user_id = message.from_user.id

    # –∫—É–ª–¥–∞—É–Ω 24—á –Ω–∞ –∂–∞–ª–æ–≤–∞–Ω–∏–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–æ —Å –∏–Ω—ã–º reason
    seconds = await get_seconds_since_last_salary_claim(user_id, "–∂–∞–ª–æ–≤–∞–Ω–∏–µ")
    COOLDOWN = 12 * 60 * 60
    if seconds is not None and seconds < COOLDOWN:
        remain = COOLDOWN - seconds
        hours = remain // 3600
        minutes = (remain % 3600) // 60
        await message.reply(f"–ñ–∞–ª–æ–≤–∞–Ω–∏–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–æ ‚Äî —á–µ—Ä–µ–∑ {hours}—á {minutes}–º.")
        return

    perks = await get_perks(user_id)

    # –±–∞–∑–∞ –∏ –Ω–∞–¥–±–∞–≤–∫–∞ (–∫–∞–∫ –±—ã–ª–æ)
    base = await get_stipend_base()
    bonus = await get_stipend_bonus() if "–Ω–∞–¥–±–∞–≤–∫–∞" in perks else 0

    # –ü–†–ï–ú–ò–Ø: 20% √ó2; 50% √ó1; 10% √ó0.5; 20% √ó0 ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç –¢–ï–ö–£–©–ï–ô ¬´–Ω–∞–¥–±–∞–≤–∫–∏¬ª
    premium_bonus = 0
    premium_note = None
    if "–ø—Ä–µ–º–∏—è" in perks:
        roll = random.randint(1, 100)  # 1..100
        sb = await get_stipend_bonus()  # –∏–º–µ–Ω–Ω–æ –æ—Ç –Ω–∞–¥–±–∞–≤–∫–∏
        if roll <= 20:
            premium_bonus = int(sb * 2.0)
            premium_note = "üèÖ –ü—Ä–µ–º–∏—è √ó2"
        elif roll <= 70:
            premium_bonus = int(sb * 1.0)
            premium_note = "üèÖ –ü—Ä–µ–º–∏—è √ó1"
        elif roll <= 80:
            premium_bonus = int(sb * 0.5)
            premium_note = "üèÖ –ü—Ä–µ–º–∏—è √ó0.5"
        else:
            premium_bonus = 0
            premium_note = "üèÖ –ü—Ä–µ–º–∏—è √ó0"

    total = base + bonus + premium_bonus

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–π—Ñ–∞ –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    room = await _get_vault_room()
    if room == -1:
        await message.reply("–°–µ–π—Ñ –µ—â—ë –Ω–µ –≤–∫–ª—é—á—ë–Ω.")
        return
    if total > room:
        await message.reply("–í —Å–µ–π—Ñ–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤ –¥–ª—è –∂–∞–ª–æ–≤–∞–Ω–∏—è.")
        return

    # –∑–∞–ø–∏—Å—å –ö–î (reason='–∂–∞–ª–æ–≤–∞–Ω–∏–µ') –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    await record_salary_claim(user_id, total, "–∂–∞–ª–æ–≤–∞–Ω–∏–µ")
    await change_balance(user_id, total, "–∂–∞–ª–æ–≤–∞–Ω–∏–µ", user_id)

    # –æ—Ç–≤–µ—Ç
    lines = [f"üíº –í—ã–ø–ª–∞—á–µ–Ω–æ –∂–∞–ª–æ–≤–∞–Ω–∏–µ: {fmt_money(total)}."]
    lines.append(f"‚Äî –±–∞–∑–∞: {fmt_money(base)}")
    if bonus > 0:
        lines.append(f"‚Äî –Ω–∞–¥–±–∞–≤–∫–∞: {fmt_money(bonus)}")
    if "–ø—Ä–µ–º–∏—è" in perks:
        lines.append(f"‚Äî {premium_note}: {fmt_money(premium_bonus)}")
    await message.reply("\n".join(lines))


async def handle_theft(message: types.Message):
    thief_id = message.from_user.id
    perks = await get_perks(thief_id)
    if "–∫—Ä–∞–∂–∞" not in perks:
        await message.reply("–£ –í–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏.")
        return
    if not message.reply_to_message:
        await message.reply("–ö—Ä–∞–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤—ã.")
        return
    victim = message.reply_to_message.from_user
    if victim.is_bot:
        await message.reply("–ö—Ä–∞—Å—Ç—å —É –±–æ—Ç–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ.")
        return

    # NEW: ¬´–©–∏—Ç¬ª —É –∂–µ—Ä—Ç–≤—ã ‚Äî 50% —Å—Ä—ã–≤ –∫—Ä–∞–∂–∏
    victim_perks = await get_perks(victim.id)
    if "—â–∏—Ç" in victim_perks and chance(50):
        await record_theft(thief_id, 0, victim.id, success=False)
        await message.reply("üõ°Ô∏è –©–∏—Ç –∂–µ—Ä—Ç–≤—ã –≤—Å–ø—ã—Ö–Ω—É–ª ‚Äî –ø—Ä–∏—à–ª–æ—Å—å —Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ñ–¥–∏—Ç–µ 12 —á–∞—Å–æ–≤.")
        return

    seconds = await get_seconds_since_last_theft(thief_id)
    COOLDOWN = 12 * 60 * 60
    if seconds is not None and seconds < COOLDOWN:
        remain = COOLDOWN - seconds
        hours = remain // 3600
        minutes = (remain % 3600) // 60
        await message.reply(f"–ù—É–∂–Ω–æ —Å—Ö–æ—Ä–æ–Ω–∏—Ç—å—Å—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ö–æ–¥–∫–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º.")
        return
    income = await get_income()
    victim_balance = await get_balance(victim.id)
    if victim_balance < income or income <= 0:
        await record_theft(thief_id, 0, victim.id, success=False)
        await message.reply("üêï –°—Ç–æ—Ä–æ–∂–µ–≤—ã–µ —Å–æ–±–∞–∫–∏ –ø–æ–¥–Ω—è–ª–∏ –ª–∞–π ‚Äî –ø—Ä–∏—à–ª–æ—Å—å –±–µ–∂–∞—Ç—å. –ü—Ä–∏–¥–µ—Ç—Å—è —Å–Ω–æ–≤–∞ –∂–¥–∞—Ç—å 24 —á–∞—Å–∞.")
        return

    await change_balance(victim.id, -income, "–∫—Ä–∞–∂–∞", thief_id)
    await change_balance(thief_id, income, "–∫—Ä–∞–∂–∞", thief_id)
    await record_theft(thief_id, income, victim.id, success=True)
    await message.reply(
        f"üó°Ô∏è {mention_html(thief_id, message.from_user.full_name)} —É–∫—Ä–∞–ª {fmt_money(income)} —É "
        f"{mention_html(victim.id, victim.full_name)}.",
        parse_mode="HTML"
    )

# ------------- —Ä—ã–Ω–æ–∫ -------------

async def handle_market_show(message: types.Message):
    price_emerald = await get_price_emerald()
    burn_bps = await get_burn_bps()

    t24  = await get_market_turnover_days(1)
    t7   = await get_market_turnover_days(7)
    t30  = await get_market_turnover_days(30)
    # –ò–Ω–¥–µ–∫—Å—ã/—à–∞–Ω—Å—ã –ø–µ—Ä–∫–æ–≤ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã
    shield = await get_perk_shield_chance()
    croup  = await get_perk_croupier_chance()
    phil   = await get_perk_philanthrope_chance()
    lucky  = await get_perk_lucky_chance()
    bonus  = await get_stipend_bonus()   # –Ω–∞–¥–±–∞–≤–∫–∞ –∫ –∂–∞–ª–æ–≤–∞–Ω–∏—é (—Å—É–º–º–∞)
    theft  = await get_income()          # —Ä–∞–∑–º–µ—Ä —É–¥–∞—á–Ω–æ–π –∫—Ä–∞–∂–∏ (—Å—É–º–º–∞)

    # ===== –ü–µ—Ä–∫–∏ =====
    # –ü–µ—Ä–∫–∏
    perk_blocks = [f"–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–∫–æ–≤: –∫—É–ø–∏—Ç—å –ø–µ—Ä–∫ <–Ω–∞–∑–≤–∞–Ω–∏–µ>"]
    for code, (emoji, title) in PERK_REGISTRY.items():
        price = await get_price_perk(code)
        price_str = f"{fmt_int(price)} ü™ô" if price is not None else "–Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è"

        # –¥–ª—è –≤–∏—Ç—Ä–∏–Ω—ã —É–±–∏—Ä–∞–µ–º –ø—Ä–∏–ø–∏—Å–∫–∏ –≤ —Å–∫–æ–±–∫–∞—Ö —Ç–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª—å–Ω–æ
        title_base = title.split(" (", 1)[0]

        if code == "–Ω–∞–¥–±–∞–≤–∫–∞":
            usage = f"\n–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ–Ω—É—Å –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ ¬´–ø–æ–ª—É—á–∏—Ç—å –∂–∞–ª–æ–≤–∞–Ω–∏–µ¬ª. —Ç–µ–∫—É—â–∞—è –Ω–∞–¥–±–∞–≤–∫–∞: +{fmt_money(bonus)}"
        elif code == "–∫—Ä–∞–∂–∞":
            usage = f"\n–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∫—Ä–∞—Å—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ ¬´—É–∫—Ä–∞—Å—Ç—å¬ª / ¬´—Å–≤–æ—Ä–æ–≤–∞—Ç—å¬ª (reply). —Å—É–º–º–∞ —É–¥–∞—á–Ω–æ–π –∫—Ä–∞–∂–∏:</b> {fmt_money(theft)}"
        elif code == "—â–∏—Ç":
            usage = f"\n<b>–®–∞–Ω—Å —É–∫–ª–æ–Ω–∏—Ç—å—Å—è –æ—Ç –∫—Ä–∞–∂–∏:</b> {shield}%"
        elif code == "–∫—Ä—É–ø—å–µ":
            usage = f"\n<b>–®–∞–Ω—Å —Ä–µ—Ñ–∞–Ω–¥–∞ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –≤ –∏–≥—Ä–∞—Ö:</b> {croup}%"
        elif code == "—Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø":
            usage = f"\n<b>–®–∞–Ω—Å —á—Ç–æ –≤–∞—à –¥–æ–∂–¥—å –æ–∫–∞—Ç–∏—Ç –µ—â–µ –æ–¥–Ω–æ–≥–æ:</b> {phil}%"
        elif code == "–≤–µ–∑—É–Ω—á–∏–∫":
            usage = f"\n<b>–®–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ —á—É–∂–æ–π –¥–æ–∂–¥—å:</b> {lucky}%"
        elif code == "–ø—Ä–µ–º–∏—è":
            usage = "\n<b>–ú–æ–¥–µ–ª—å –ø—Ä–µ–º–∏–∏:</b> 20%√ó2 | 50%√ó1 | 10%√ó0.5 | 20%√ó0"

        else:
            usage = "‚Äî"



        perk_blocks.append(
            f"{emoji} <b>{code}</b>\n"
            f"<b>–¶–µ–Ω–∞:</b> {price_str}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {usage}\n"
        )


    # ===== –õ–æ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ =====
    offers = await list_active_offers()
    offer_blocks = []
    for o in offers:
        seller_id = o["seller_id"]
        price = o["price"]
        link = o["link"] or "(—Å—Å—ã–ª–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞)"
        offer_id = o["offer_id"]

        # —é–∑–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ (–µ—Å–ª–∏ –Ω–µ—Ç username ‚Äî –≤—ã–≤–æ–¥–∏–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è)
        try:
            member = await message.bot.get_chat_member(message.chat.id, seller_id)
            seller_repr = mention_html(seller_id, member.user.full_name or "–£—á–∞—Å—Ç–Ω–∏–∫")
        except Exception:
            seller_repr = mention_html(seller_id, "–£—á–∞—Å—Ç–Ω–∏–∫")

        offer_blocks.append(
            f"–¢–æ–≤–∞—Ä: {link}\n"
            f"–ù–æ–º–µ—Ä –ª–æ—Ç–∞: {offer_id}\n"
            f"–¶–µ–Ω–∞: {fmt_money(price)}\n"
            f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_repr}\n"
            f"–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏: –∫—É–ø–∏—Ç—å –ª–æ—Ç {offer_id}"
        )


    turnover_line = (
        f"üìà <b>–û–±–æ—Ä–æ—Ç</b>: 24—á ‚Äî {fmt_money(t24)} ‚Ä¢ 7–¥ ‚Äî {fmt_money(t7)} ‚Ä¢ 30–¥ ‚Äî {fmt_money(t30)}"
    )
    burn_line = f"üî• <b>–°–∂–∏–≥–∞–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–∫–µ</b>: {fmt_percent_bps(burn_bps)}"

    txt = (
        "üõí <b>–†–´–ù–û–ö</b>\n\n"
        f"üíé –≠–º–µ—Ä–∞–ª—å–¥: {fmt_money(price_emerald)}\n"
        f"–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏: –∫—É–ø–∏—Ç—å —ç–º–µ—Ä–∞–ª—å–¥\n\n"
        "üéñ <b>–ü–ï–†–ö–ò</b>\n" +
        ("\n\n".join(perk_blocks) if perk_blocks else "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.") +
        "\n\n"
        "üì¶ <b>–õ–û–¢–´ –£–ß–ê–°–¢–ù–ò–ö–û–í</b>\n" +
        ("\n\n".join(offer_blocks) if offer_blocks else "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤.") +
        "\n\n" +
        turnover_line + "\n" +
        burn_line
    )

    try:
        # aiogram v3
        await message.reply(
            txt,
            parse_mode="HTML",
            link_preview_options=types.LinkPreviewOptions(is_disabled=True)
        )
    except TypeError:
        # aiogram v2
        await message.reply(
            txt,
            parse_mode="HTML",
            disable_web_page_preview=True
        )



async def handle_offer_create(message: types.Message, link: str, price: int):
    if price <= 0:
        await message.reply("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return
    offer_id = await create_offer(message.from_user.id, link, price)
    await message.reply(f"–õ–æ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. ID: {offer_id}. –°–Ω—è—Ç—å: ¬´—Å–Ω—è—Ç—å –ª–æ—Ç {offer_id}¬ª. –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Ä—ã–Ω–∫–µ.", parse_mode="HTML")

async def handle_offer_cancel(message: types.Message, offer_id: int):
    # —Å–Ω—è—Ç—å –º–æ–∂–µ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∫—É—Ä–∞—Ç–æ—Ä
    offers = await list_active_offers()
    owner_id = None
    for o in offers:
        if o["offer_id"] == offer_id:
            owner_id = o["seller_id"]
            break
    if owner_id is None:
        await message.reply("–¢–∞–∫–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ—Ç–∞ –Ω–µ—Ç.")
        return
    if message.from_user.id != owner_id and message.from_user.id != KURATOR_ID:
        await message.reply("–°–Ω—è—Ç—å –ª–æ—Ç –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –∏–ª–∏ –∫—É—Ä–∞—Ç–æ—Ä.")
        return
    await cancel_offer(offer_id, message.from_user.id)
    await message.reply("–õ–æ—Ç —Å–Ω—è—Ç.")

async def _apply_burn_and_return(price: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ–ª–∏—á–∏–Ω—É burn –ø–æ —Ç–µ–∫—É—â–µ–º—É bps (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑)."""
    bps = await get_burn_bps()
    return (price * bps) // 10000

async def handle_offer_buy(message: types.Message, offer_id: int):
    # –Ω–∞–π—Ç–∏ –ª–æ—Ç
    offers = await list_active_offers()
    offer = None
    for o in offers:
        if o["offer_id"] == offer_id:
            offer = o
            break
    if not offer:
        await message.reply("–¢–∞–∫–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ—Ç–∞ –Ω–µ—Ç.")
        return

    buyer_id = message.from_user.id
    price = offer["price"]
    bal = await get_balance(buyer_id)
    if price > bal:
        await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è {fmt_money(price)}, –Ω–∞ —Ä—É–∫–∞—Ö {fmt_money(bal)}.")
        return

    burn = await _apply_burn_and_return(price)
    to_seller = price - burn

    # —Å–ø–∏—Å—ã–≤–∞–µ–º —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    await change_balance(buyer_id, -price, f"–ø–æ–∫—É–ø–∫–∞ –ª–æ—Ç–∞ #{offer_id}", buyer_id)
    # –Ω–∞—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü—É
    if to_seller > 0:
        await change_balance(offer["seller_id"], to_seller, f"–ø—Ä–æ–¥–∞–∂–∞ –ª–æ—Ç–∞ #{offer_id}", buyer_id)
    # —Å–∂–∏–≥–∞–µ–º
    if burn > 0:
        await record_burn(burn, f"offer_id={offer_id}")

    # –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É
    sale_id = await insert_history(buyer_id, "offer_sold", price, f"offer_id={offer_id};seller={offer['seller_id']}")

    # –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    today = datetime.utcnow().strftime("%Y%m%d")
    contract_id = f"C-{today}-{sale_id}"
    seller_mention = mention_html(offer["seller_id"], "–ü—Ä–æ–¥–∞–≤–µ—Ü")
    await message.reply(
        f"üßæ –ö–æ–Ω—Ç—Ä–∞–∫—Ç {contract_id}\n"
        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {mention_html(buyer_id, message.from_user.full_name)}\n"
        f"–¢–æ–≤–∞—Ä: ¬´–ª–æ—Ç #{offer_id}¬ª ({offer['link'] or '—Å—Å—ã–ª–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'})\n"
        f"–¶–µ–Ω–∞: {fmt_money(price)}\n"
        f"–ö–æ–º–∏—Å—Å–∏—è (—Å–∂–∏–≥–∞–Ω–∏–µ/–Ω–∞–ª–æ–≥): {fmt_money(burn)}\n"
        f"–ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–¥–∞–≤—Ü—É: {fmt_money(to_seller)}\n"
        f"–ì–∞—Ä–∞–Ω—Ç: @kovalskyii\n"
        f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_mention}",
        parse_mode="HTML"
    )

async def handle_buy_emerald(message: types.Message):
    price = await get_price_emerald()
    buyer_id = message.from_user.id
    bal = await get_balance(buyer_id)
    if price > bal:
        await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è {fmt_money(price)}, –Ω–∞ —Ä—É–∫–∞—Ö {fmt_money(bal)}.")
        return
    burn = await _apply_burn_and_return(price)
    # —Å–ø–∏—Å—ã–≤–∞–µ–º —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–∫ –±—ã —É—Ö–æ–¥–∏—Ç –≤ —Å–µ–π—Ñ, —Ç.–∫. –Ω–∏–∫–æ–º—É –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º)
    await change_balance(buyer_id, -price, "–ø–æ–∫—É–ø–∫–∞ —ç–º–µ—Ä–∞–ª—å–¥–∞", buyer_id)
    if burn > 0:
        await record_burn(burn, "emerald")
    # –∫–æ–Ω—Ç—Ä–∞–∫—Ç/—á–µ–∫
    sale_id = await insert_history(buyer_id, "emerald_buy", price, None)
    today = datetime.utcnow().strftime("%Y%m%d")
    contract_id = f"C-{today}-{sale_id}"
    await message.reply(
        f"üßæ –ö–æ–Ω—Ç—Ä–∞–∫—Ç {contract_id}\n"
        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {mention_html(buyer_id, message.from_user.full_name)}\n"
        f"–¢–æ–≤–∞—Ä: ¬´–≠–º–µ—Ä–∞–ª—å–¥¬ª\n"
        f"–¶–µ–Ω–∞: {fmt_money(price)}\n"
        f"–ö–æ–º–∏—Å—Å–∏—è (—Å–∂–∏–≥–∞–Ω–∏–µ/–Ω–∞–ª–æ–≥): {fmt_money(burn)}\n"
        f"–ü–µ—Ä–µ–≤–æ–¥ –≤ —Å–µ–π—Ñ: {fmt_money(price - burn)}\n"
        f"–ì–∞—Ä–∞–Ω—Ç: @kovalskyii",
        parse_mode="HTML"
    )

async def handle_buy_perk(message: types.Message, code: str):
    code = code.strip().lower()
    if code not in PERK_REGISTRY:
        await message.reply("–¢–∞–∫–æ–≥–æ –ø–µ—Ä–∫–∞ –Ω–µ—Ç.")
        return
    buyer_id = message.from_user.id
    perks = await get_perks(buyer_id)
    if code in perks:
        await message.reply("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø–µ—Ä–∫. –ü–æ–≤—Ç–æ—Ä–Ω–æ –∫—É–ø–∏—Ç—å –Ω–µ–ª—å–∑—è.")
        return

    price = await get_price_perk(code)
    if price is None:
        await message.reply("–≠—Ç–æ—Ç –ø–µ—Ä–∫ —Å–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è.")
        return

    
    bal = await get_balance(buyer_id)
    if price > bal:
        await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è {fmt_money(price)}, –Ω–∞ —Ä—É–∫–∞—Ö {fmt_money(bal)}.")
        return

    burn = await _apply_burn_and_return(price)
    # —Å–ø–∏—Å—ã–≤–∞–µ–º —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    await change_balance(buyer_id, -price, f"–ø–æ–∫—É–ø–∫–∞ –ø–µ—Ä–∫–∞ {code}", buyer_id)
    if burn > 0:
        await record_burn(burn, f"perk={code}")
    # –≤—ã–¥–∞—ë–º –ø–µ—Ä–∫
    await grant_perk(buyer_id, code)

    # —á–µ–∫
    sale_id = await insert_history(buyer_id, "perk_buy", price, code)
    today = datetime.utcnow().strftime("%Y%m%d")
    contract_id = f"C-{today}-{sale_id}"
    emoji, title = PERK_REGISTRY[code]
    await message.reply(
        f"üßæ –ö–æ–Ω—Ç—Ä–∞–∫—Ç {contract_id}\n"
        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {mention_html(buyer_id, message.from_user.full_name)}\n"
        f"–¢–æ–≤–∞—Ä: ¬´{title}¬ª\n"
        f"–¶–µ–Ω–∞: {fmt_money(price)}\n"
        f"–ö–æ–º–∏—Å—Å–∏—è (—Å–∂–∏–≥–∞–Ω–∏–µ/–Ω–∞–ª–æ–≥): {fmt_money(burn)}\n"
        f"–ü–µ—Ä–µ–≤–æ–¥ –≤ —Å–µ–π—Ñ: {fmt_money(price - burn)}\n"
        f"–ì–∞—Ä–∞–Ω—Ç: @kovalskyii",
        parse_mode="HTML"
    )

# --------- –í–∏—Ç—Ä–∏–Ω–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ / —Å–µ–π—Ñ ---------

async def handle_vault_enable(message: types.Message):
    if message.from_user.id != KURATOR_ID:
        return
    m = re.match(r"^–≤–∫–ª—é—á–∏—Ç—å\s+—Å–µ–π—Ñ\s+(\d+)$", message.text.strip().lower())
    if not m:
        await message.reply("–ü—Ä–∏–º–µ—Ä: ¬´–≤–∫–ª—é—á–∏—Ç—å —Å–µ–π—Ñ 1000000¬ª")
        return
    cap = int(m.group(1))
    circulating = await get_circulating_safe()
    rid = await vault_init(cap, circulating)
    if rid is None:
        await message.reply("–ö–∞–ø –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±–æ—Ä–æ—Ç–∞ ‚Äî —É–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ø.")
        return
    await message.reply(f"–°–µ–π—Ñ –≤–∫–ª—é—á—ë–Ω. –ö–∞–ø: {fmt_int(cap)}. –í –æ–±–æ—Ä–æ—Ç–µ: {fmt_int(circulating)}. –û—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞–ª–æ–∂–µ–Ω–æ –≤ —Å–µ–π—Ñ.")

async def get_circulating_safe() -> int:
    # –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–æ–ª—è—Ü–∏–∏
    return await get_circulating()

async def handle_vault_reset(message: types.Message):
    if message.from_user.id != KURATOR_ID:
        return
    m = re.match(r"^–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å\s+—Å–µ–π—Ñ\s+(\d+)\s+–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é$", message.text.strip().lower())
    if not m:
        await message.reply('–ü—Ä–∏–º–µ—Ä: ¬´–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—Ñ 1000000 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é¬ª')
        return
    cap = int(m.group(1))
    circulating = await get_circulating_safe()
    rid = await vault_init(cap, circulating)
    if rid is None:
        await message.reply("–ö–∞–ø –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±–æ—Ä–æ—Ç–∞ ‚Äî —É–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ø.")
        return
    await message.reply(f"–°–µ–π—Ñ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ö–∞–ø: {fmt_int(cap)}. –í –æ–±–æ—Ä–æ—Ç–µ: {fmt_int(circulating)}. –û—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞–ª–æ–∂–µ–Ω–æ –≤ —Å–µ–π—Ñ.")


async def handle_vault_stats(message: types.Message):
    stats = await get_economy_stats()
    if not stats:
        await message.reply("–°–µ–π—Ñ –µ—â—ë –Ω–µ –≤–∫–ª—é—á—ë–Ω.")
        return

    cap_s          = fmt_int(stats["cap"])
    circulating_s  = fmt_int(stats["circulating"])
    burned_s       = fmt_int(stats["burned"])
    vault_s        = fmt_int(stats["vault"])
    supply_s       = fmt_int(stats.get("supply", stats["cap"] - stats["burned"]))
    bps_pct        = fmt_percent_bps(stats["burn_bps"])
    burned_pct     = (stats["burned"] / stats["cap"] * 100) if stats["cap"] > 0 else 0.0
    base  = await get_stipend_base()
    bonus = await get_stipend_bonus()
    theft  = await get_income()


    txt = (
        "üè¶ <b>–≠–ö–û–ù–û–ú–ò–ö–ê –ö–õ–£–ë–ê</b>\n\n"
        f"üß± <b>–ö–ê–ü:</b> {cap_s}\n"
        f"ü™ô <b>–¢–µ–∫—É—â–∏–π —Å–∞–ø–ª–∞–π:</b> {supply_s}\n" 
        f"üîê <b>–í —Å–µ–π—Ñ–µ:</b> {vault_s}\n"
        f"üîÑ <b>–ù–∞ —Ä—É–∫–∞—Ö:</b> {circulating_s}\n"
        f"üî• <b>–°–æ–∂–∂–µ–Ω–æ:</b> {burned_s} ({burned_pct:.2f}%)\n"
        
        f"¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑ ¬∑\n"
        f"<b>–ò–ù–î–ï–ö–°–´ –∏ –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´</b>\n\n"
        f"üßØ <b>–°–∂–∏–≥–∞–Ω–∏–µ (–Ω–∞–ª–æ–≥–∏):</b> {bps_pct}\n"
        f"üíº <b>–ñ–∞–ª–æ–≤–∞–Ω–∏–µ:</b> {fmt_money(base)}\n"

    )
    await message.reply(txt, parse_mode="HTML")



# --------- –∫–æ–Ω—Ñ–∏–≥–∏ —Å–µ—Ç—Ç–µ—Ä—ã ---------

async def handle_burn_bps_set(message: types.Message, v: int):
    await set_burn_bps(v)
    cur = await get_burn_bps()
    await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –°–∂–∏–≥–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {fmt_percent_bps(cur)}.")

async def handle_price_emerald_set(message: types.Message, v: int):
    await set_price_emerald(v)
    await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –¶–µ–Ω–∞ –≠–º–µ—Ä–∞–ª—å–¥–∞: {fmt_money(v)}.")

async def handle_price_perk_set(message: types.Message, code: str, v: int):
    code = code.strip().lower()
    if code not in PERK_REGISTRY:
        await message.reply("–¢–∞–∫–æ–≥–æ –ø–µ—Ä–∫–∞ –Ω–µ—Ç.")
        return
    await set_price_perk(code, v)
    await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –¶–µ–Ω–∞ –ø–µ—Ä–∫–∞ ¬´{PERK_REGISTRY[code][1]}¬ª: {fmt_money(v)}.")

async def handle_multiplier_set(message: types.Message, game: str, x: int):
    await set_multiplier(game, x)
    await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è ¬´{game}¬ª: √ó{x}.")

async def handle_casino_toggle(message: types.Message):
    turn_on = message.text.strip().endswith("–æ—Ç–∫—Ä—ã—Ç—å")
    await set_casino_on(turn_on)
    await message.reply("üé∞ –ö–∞–∑–∏–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ." if turn_on else "üé∞ –ö–∞–∑–∏–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")

async def handle_income_set(message: types.Message, v: int):
    await set_income(v)
    await message.reply(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ. –°—É–º–º–∞ —É–¥–∞—á–Ω–æ–π –∫—Ä–∞–∂–∏: {fmt_money(v)}.")

async def handle_limit_bet_set(message: types.Message, v: int):
    await set_limit_bet(v)
    await message.reply("üõ†Ô∏è –õ–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏ –æ—Ç–∫–ª—é—á—ë–Ω." if v == 0 else f"üõ†Ô∏è –õ–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏: {fmt_int(v)}.")

async def handle_limit_rain_set(message: types.Message, v: int):
    await set_limit_rain(v)
    await message.reply("üõ†Ô∏è –õ–∏–º–∏—Ç –¥–æ–∂–¥—è –æ—Ç–∫–ª—é—á—ë–Ω." if v == 0 else f"üõ†Ô∏è –õ–∏–º–∏—Ç –¥–æ–∂–¥—è: {fmt_money(v)}.")


# --------- ¬´–∫–∞—Ä–º–∞–Ω¬ª –∫—É—Ä–∞—Ç–æ—Ä–∞ ---------

async def handle_kurator_karman(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∏–∫–µ—Ç –ö–ª—É–±–∞ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return
    target = message.reply_to_message.from_user
    balance = await get_balance(target.id)
    await message.reply(
        f"üíº {mention_html(target.id, target.full_name)} —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–≤–æ—ë–º –∫–∞—Ä–º–∞–Ω–µ {fmt_money(balance)}.",
        parse_mode="HTML"
    )

# --------- –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ¬´—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥¬ª ---------

# commands.py
def bullets(items: list[str]) -> str:
    # –ü—Ä–µ–≤—Ä–∞—Ç–∏–º <...> –≤ ¬´...¬ª –∏ –¥–æ–±–∞–≤–∏–º –º–∞—Ä–∫–µ—Ä
    safe_lines = []
    for s in items:
        s = s.replace("<", "¬´").replace(">", "¬ª")
        safe_lines.append(f"‚Ä¢ {s}")
    return "\n".join(safe_lines)

async def handle_commands_catalog(message: types.Message):

    price_pin = await get_price_pin()
    price_pin_loud = await get_price_pin_loud()

    keyholders = [
        "–≤—Ä—É—á–∏—Ç—å <N> (reply) ‚Äî –≤—ã–¥–∞—Ç—å –∏–∑ —Å–µ–π—Ñ–∞",
        "–≤–∑—ã—Å–∫–∞—Ç—å <N> (reply) ‚Äî –∑–∞–±—Ä–∞—Ç—å –≤ —Å–µ–π—Ñ",
        "–∫–∞—Ä–º–∞–Ω (reply) ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞",
    ]
    members = [
        "–º–æ–π –∫–∞—Ä–º–∞–Ω - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞",
        "–º–æ—è —Ä–æ–ª—å - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–π —Ä–æ–ª–∏",
        "—Ä–æ–ª—å (reply) - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–æ–ª–∏ –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ö–ª—É–±–∞",
        "—Ä–µ–π—Ç–∏–Ω–≥ –∫–ª—É–±–∞",
        "—á–ª–µ–Ω—ã –∫–ª—É–±–∞",
        "—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ –∫–ª—é—á–∞ / –≤–ª–∞–¥–µ–ª—å—Ü—ã –∫–ª—é—á–∞",
        "–ø–µ—Ä–µ–¥–∞—Ç—å <N> (reply) ‚Äî –ø–µ—Ä–µ–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫—É",
        "–¥–æ–∂–¥—å <N> ‚Äî —Ä–∞–∑–¥–∞—Ç—å –¥–æ 5 —Å–ª—É—á–∞–π–Ω—ã–º",
        "—Å—Ç–∞–≤–ª—é <N> –Ω–∞ üé≤/–∫—É–±–∏–∫ | üéØ/–¥–∞—Ä—Ç—Å | üé≥/–±–æ—É–ª–∏–Ω–≥ | üé∞/–∞–≤—Ç–æ–º–∞—Ç—ã ‚Äî —Å—Ç–∞–≤–∫–∞ –≤ –∏–≥—Ä—É",
        "—Ä—ã–Ω–æ–∫ ‚Äî –≤–∏—Ç—Ä–∏–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ª–æ—Ç–æ–≤",
        "–∫—É–ø–∏—Ç—å —ç–º–µ—Ä–∞–ª—å–¥ / –∫—É–ø–∏—Ç—å –ø–µ—Ä–∫ <–∫–æ–¥> / –∫—É–ø–∏—Ç—å –ª–æ—Ç <offer_id>",
        "–≤—ã—Å—Ç–∞–≤–∏—Ç—å <—Å—Å—ã–ª–∫–∞> <—Ü–µ–Ω–∞> / —Å–Ω—è—Ç—å –ª–æ—Ç <offer_id>",
        "–º–æ–∏ –ø–µ—Ä–∫–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –ø–µ—Ä–∫–æ–≤",
        "–ø–µ—Ä–∫–∏ (reply) - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–∫–æ–≤ –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ö–ª—É–±–∞",
        "–ø–æ–ª—É—á–∏—Ç—å –∂–∞–ª–æ–≤–∞–Ω–∏–µ ‚Äî –±–∞–∑–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞ —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤",
        "—É–∫—Ä–∞—Å—Ç—å / —Å–≤–æ—Ä–æ–≤–∞—Ç—å (reply) ‚Äî –∫—Ä–∞–∂–∞ –ø–æ –ø–µ—Ä–∫—É ¬´–∫—Ä–∞–∂–∞¬ª, —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤",
        "—Å–µ–π—Ñ ‚Äî —Å–≤–æ–¥–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∫–ª—É–±–∞",
        "–∫–æ–Ω—Ü–µ—Ä—Ç - —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤ –≤—ã–±–∏—Ä–∞–µ—Ç –ì–µ—Ä–æ—è –î–Ω—è",
        "–≤—ã—Å—Ç—É–ø–∏—Ç—å - –∫–æ–º–∞–Ω–¥–∞ –ì–µ—Ä–æ—è –î–Ω—è, —Ä–∞–∑–æ–≤—ã–π –≥–æ–Ω–æ—Ä–∞—Ä",
    ]
    paid = [
    f"–∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç (reply) ‚Äî –∑–∞–∫—Ä–µ–ø–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {fmt_money(price_pin)}",
    f"–∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç –≥—Ä–æ–º–∫–æ (reply) ‚Äî –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –¥–ª—è –≤—Å–µ—Ö: {fmt_money(price_pin_loud)}",
    ]

    txt = (
        "üìú <b>–°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î</b>\n\n"
        "üóù <b>–í–ª–∞–¥–µ–ª—å—Ü—ã –∫–ª—é—á–∞</b>\n" + bullets(keyholders) + "\n\n"
        "üé≠ <b>–ß–ª–µ–Ω—ã –∫–ª—É–±–∞</b>\n" + bullets(members) + "\n\n"
        "üí≥ <b>–ü–ª–∞—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n" + bullets(paid)
    )
    await message.reply(txt, parse_mode="HTML")

async def handle_commands_curator(message: types.Message):
    if message.from_user.id != KURATOR_ID:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ö—É—Ä–∞—Ç–æ—Ä—É.")
        return

    blocks = [
        ("üè¶ –°–µ–π—Ñ/—ç–∫–æ–Ω–æ–º–∏–∫–∞", [
            "–≤–∫–ª—é—á–∏—Ç—å —Å–µ–π—Ñ <CAP> / –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—Ñ <CAP> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é",
            "—Å–µ–π—Ñ ‚Äî —Å–≤–æ–¥–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏",
            "—Å–∂–∏–≥–∞–Ω–∏–µ <bps> ‚Äî 100 bps = 1%",
            "–∫—Ä–∞–∂–∞ <N> ‚Äî —Å—É–º–º–∞ —É–¥–∞—á–Ω–æ–π –∫—Ä–∞–∂–∏",
        ]),
        ("üé∞ –ö–∞–∑–∏–Ω–æ", [
            "–∫–∞–∑–∏–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å",
            "–º–Ω–æ–∂–∏—Ç–µ–ª—å –∫—É–±–∏–∫|–¥–∞—Ä—Ç—Å|–±–æ—É–ª–∏–Ω–≥|–∞–≤—Ç–æ–º–∞—Ç—ã <X>",
            "–ª–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∞ <N> / –ª–∏–º–∏—Ç –¥–æ–∂–¥—å <N>",
        ]),
        ("üíé –†—ã–Ω–æ–∫ –∏ —Ü–µ–Ω—ã", [
            "—Ü–µ–Ω–∞ —ç–º–µ—Ä–∞–ª—å–¥ <N>",
            "—Ü–µ–Ω–∞ –ø–µ—Ä–∫ <–∫–æ–¥> <N>",
            "—Ü–µ–Ω–∞ –ø–æ—Å—Ç <N> / —Ü–µ–Ω–∞ –≥—Ä–æ–º–∫–∏–π –ø–æ—Å—Ç <N>",
        ]),
        ("üéñ –ü–µ—Ä–∫–∏", [
            "—É –∫–æ–≥–æ –ø–µ—Ä–∫ <–∫–æ–¥>|–¥–µ—Ä–∂–∞—Ç–µ–ª–∏ –ø–µ—Ä–∫–∞ / –ø–µ—Ä–∫–∏ —Ä–µ–µ—Å—Ç—Ä",
            "–¥–∞—Ä–æ–≤–∞—Ç—å <–∫–æ–¥> (reply) / —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å <–∫–æ–¥> (reply)",
            "—â–∏—Ç —à–∞–Ω—Å <P> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–Ω—Å —É–≤–µ—Ä–Ω—É—Ç—å—Å—è –æ—Ç –∫—Ä–∞–∂–∏"
            "–∫—Ä—É–ø—å–µ —à–∞–Ω—Å <P> ‚Äî —à–∞–Ω—Å —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ¬ª"
            "—Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø —à–∞–Ω—Å <P> ‚Äî —à–∞–Ω—Å –ø–æ–¥–∞—Ä–∫–∞ —à–µ—Å—Ç–æ–º—É –ø—Ä–∏ –¥–æ–∂–¥–µ"
            "–≤–µ–∑—É–Ω—á–∏–∫ —à–∞–Ω—Å <P> ‚Äî —à–∞–Ω—Å –∞–≤—Ç–æ–ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –¥–æ–∂–¥—å"
        ]),
        ("üé≠ –†–æ–ª–∏ –∏ –∫–ª—é—á–∏", [
            "–Ω–∞–∑–Ω–∞—á–∏—Ç—å \"–†–æ–ª—å\" –æ–ø–∏—Å–∞–Ω–∏–µ (reply) / —Å–Ω—è—Ç—å —Ä–æ–ª—å (reply)",
            "–∫–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞ (reply) / —Å–Ω—è—Ç—å –∫–ª—é—á (reply)",
        ]),
        ("üßπ –°–±—Ä–æ—Å—ã/—Å–ª—É–∂–µ–±–Ω—ã–µ", [
            "–æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å (reply) / –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã / –æ–±–Ω—É–ª–∏—Ç—å –∫–ª—É–±",
        ]),
        ("üéÅ –ñ–∞–ª–æ–≤–∞–Ω–∏–µ –∏ —â–µ–¥—Ä–æ—Å—Ç—å", [
            "–∂–∞–ª–æ–≤–∞–Ω–∏–µ –±–∞–∑–∞ <N> / –∂–∞–ª–æ–≤–∞–Ω–∏–µ –Ω–∞–¥–±–∞–≤–∫–∞ <N>",
            "—â–µ–¥—Ä–æ—Å—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å <p>% / —â–µ–¥—Ä–æ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥–∞ <N>",
            "—â–µ–¥—Ä–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å / —â–µ–¥—Ä–æ—Å—Ç—å –æ—á–∫–∏ / —â–µ–¥—Ä–æ—Å—Ç—å –æ–±–Ω—É–ª–∏—Ç—å (reply)",
            "—â–µ–¥—Ä–æ—Å—Ç—å –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é",
        ]),
        ("üß© –ö–æ–¥-—Å–ª–æ–≤–æ", [
            "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–¥ <—Å–ª–æ–≤–æ> <—Å—É–º–º–∞> <–ø–æ–¥—Å–∫–∞–∑–∫–∞>",
            "–æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–¥",
        ]),
    ]

    parts = ["üìú <b>–ö–û–ú–ê–ù–î–´ –ö–£–†–ê–¢–û–†–ê</b>"]
    for title, items in blocks:
        parts.append(f"\n{title}\n" + bullets(items))

    await message.reply("\n".join(parts), parse_mode="HTML", disable_web_page_preview=True)


# --------- –ì–ï–†–û–ô –î–ù–Ø ---------

async def handle_hero_of_day(message: types.Message):
    chat_id = message.chat.id

    current, until = await hero_get_current_with_until(chat_id)
    if current is not None:
        try:
            member = await message.bot.get_chat_member(chat_id, current)
            name = member.user.full_name or "–£—á–∞—Å—Ç–Ω–∏–∫"
        except Exception:
            name = "–£—á–∞—Å—Ç–Ω–∏–∫"

        # –∫—Ä–∞—Å–∏–≤–æ–µ –ö–î
        from datetime import timezone
        now = datetime.now(timezone.utc)
        remain = until - now if until else None
        cd_line = ""
        if remain and remain.total_seconds() > 0:
            total = int(remain.total_seconds())
            h = total // 3600
            m = (total % 3600) // 60
            cd_line = f"\n–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: <b>{h}—á {m}–º</b>."

        await message.reply(
            f"üé§ –°–µ–≥–æ–¥–Ω—è –≤—ã—Å—Ç—É–ø–∞–µ—Ç ‚Äî {mention_html(current, name)}.\n"
            f"–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è {HERO_TITLE.lower()}: ¬´–≤—ã—Å—Ç—É–ø–∏—Ç—å¬ª.{cd_line}",
            parse_mode="HTML"
        )
        return


    # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–Ω–µ –±–æ—Ç–∞, –≤ —á–∞—Ç–µ, –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö)
    candidates = []
    for uid in await get_known_users():
        try:
            member = await message.bot.get_chat_member(chat_id, uid)
            if getattr(member.user, "is_bot", False):
                continue
            if member.status in ("left", "kicked"):
                continue
            candidates.append(uid)
        except Exception:
            continue

    if not candidates:
        await message.reply("–ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
        return

    hero_id = random.choice(candidates)
    await hero_set_for_today(chat_id, hero_id, hours=12)

    # —Ç–µ–∫—Å—Ç—ã –∞–Ω–æ–Ω—Å–∞ (–±–µ–∑ –ø–∏–Ω–≥–æ–≤)
    try:
        member = await message.bot.get_chat_member(chat_id, hero_id)
        hero_name = member.user.full_name or "–£—á–∞—Å—Ç–Ω–∏–∫"
    except Exception:
        hero_name = "–£—á–∞—Å—Ç–Ω–∏–∫"

    await message.reply(
        "üé™ –ú—ã –≥–æ—Ç–æ–≤–∏–º –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ü–µ—Ä—Ç. –ù–æ –Ω–∞–º –Ω—É–∂–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.\n"
        "–ü—Ä–æ—à–ª—ã–π —É–ª–µ—Ç–µ–ª –≤ –î—É–±–∞–π –Ω–∞ —Å–∫–∞—á–∫–∏ –±–ª–æ—Ö –Ω–∞ –∫—É–∑–Ω–µ—á–∏–∫–∞—Ö‚Ä¶\n"
        f"–ö–∞–∂–µ—Ç—Å—è, {mention_html(hero_id, hero_name)} –Ω–∞–º –ø–æ–¥–æ–π–¥—ë—Ç!\n\n"
        f"üè∑ –¢–∏—Ç—É–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{HERO_TITLE}</b>\n"
        "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è: ¬´–≤—ã—Å—Ç—É–ø–∏—Ç—å¬ª.",
        parse_mode="HTML"
    )

async def handle_hero_concert(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    current = await hero_get_current(chat_id)
    if current is None:
        await message.reply("–°–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω. –ö–æ–º–∞–Ω–¥–∞: ¬´–∫–æ–Ω—Ü–µ—Ä—Ç¬ª.")
        return
    if current != user_id:
        await message.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.")
        return

    async def hero_has_claimed_today(chat_id: int, user_id: int) -> bool:
        """True, –µ—Å–ª–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ hero_claim –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 12 —á–∞—Å–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ."""
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("""
                SELECT date FROM history
                WHERE user_id=? AND action='hero_claim' AND reason LIKE ?
                ORDER BY id DESC LIMIT 1
            """, (user_id, f"%chat_id={chat_id}%")) as cur:
                row = await cur.fetchone()
        if not row:
            return False
        try:
            last = datetime.fromisoformat(row[0] + ("+00:00" if "Z" not in row[0] and "+" not in row[0] else ""))
        except Exception:
            return False
        # 12 —á–∞—Å–æ–≤
        from datetime import timedelta, timezone
        now = datetime.now(timezone.utc)
        return (now - last) < timedelta(hours=12)


    reward = random.randint(HERO_CONCERT_MIN, HERO_CONCERT_MAX)
    await hero_record_claim(chat_id, user_id, reward)
    await change_balance(user_id, reward, "–≤—ã—Å—Ç—É–ø–∏—Ç—å", user_id)

    await message.reply(
        "üé§ –≠—Ç–æ –±—ã–ª–æ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ! –ö–æ–Ω—Ü–µ—Ä—Ç –ø–æ—á—Ç–∏ –∑–∞—Ç–º–∏–ª –ë–∏—Ç–ª–∑.\n"
        f"–ó—Ä–∏—Ç–µ–ª–∏ –≤ –ø–µ—Ä–µ—Ö–æ–¥–µ –ª–∏–∫–æ–≤–∞–ª–∏ –∏ –Ω–∞–∫–∏–¥–∞–ª–∏ –≤–∞–º {fmt_money(reward)} –≤ —à–∞–ø–∫—É.",
    )

async def _pin_paid(message: types.Message, loud: bool):
    if not message.reply_to_message:
        await message.reply("–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å.")
        return
    price = await get_price_pin_loud() if loud else await get_price_pin()

    user_id = message.from_user.id
    bal = await get_balance(user_id)
    if price > bal:
        await message.reply(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω—É–∞—Ä–æ–≤. –¶–µ–Ω–∞: {fmt_money(price)}. –ù–∞ —Ä—É–∫–∞—Ö: {fmt_money(bal)}.")
        return

    # —Å–ø–∏—Å—ã–≤–∞–µ–º (–∏–¥—ë—Ç –≤ —Å–µ–π—Ñ; –Ω–∏–∫–æ–º—É –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º)
    await change_balance(user_id, -price, "util_pin" + ("_loud" if loud else ""), user_id)

    # –ø–∏–Ω
    try:
        await message.bot.pin_chat_message(
            chat_id=message.chat.id,
            message_id=message.reply_to_message.message_id,
            disable_notification=not loud  # —Ç–∏—Ö–∏–π = True, –≥—Ä–æ–º–∫–∏–π = False
        )
        await message.reply(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ. –° –≤–∞—Å —Å–Ω—è—Ç–æ: {fmt_money(price)}")
    except Exception as e:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å: {e}")

async def _generosity_reset_points_for(user_id: int) -> int:
    pts = await get_generosity_points(user_id)
    if pts > 0:
        # —Å–ø–∏—à–µ–º –æ—á–∫–∏ ¬´–≤ –Ω–æ–ª—å¬ª –µ–¥–∏–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º
        await insert_history(user_id, "generosity_pay_points", pts, "reset")
    return pts

