import re
import os
import sys
import aiosqlite
import asyncio
from aiogram import types
from db import (
    get_balance, change_balance, set_role, get_role,
    grant_key, revoke_key, has_key, get_last_history,
    get_top_users, get_all_roles, reset_user_balance, 
    reset_all_balances

)

KURATOR_ID = 164059195
DB_PATH = "/data/bot_data.sqlite"

async def handle_message(message: types.Message):
    if not message.text:
        return
    text = message.text.lower().strip()
    author_id = message.from_user.id

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    if author_id == (await message.bot.get_me()).id:
        return

    # üîì –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–º
    if text == "–º–æ–π –∫–∞—Ä–º–∞–Ω":
        bal = await get_balance(author_id)
        await message.reply(f"–£ –í–∞—Å –≤ –∫–∞—Ä–º–∞–Ω–µ ü™ô{bal} –Ω—É–∞—Ä–æ–≤.")
        return

    if text == "–º–æ—è —Ä–æ–ª—å":
        role_info = await get_role(author_id)
        if role_info:
            role = role_info.get("role", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            desc = role_info.get("description", "")
            text_response = f"üé≠ *{role}*\n\n_{desc}_"
            await message.reply(text_response, parse_mode="Markdown")
        else:
            await message.reply("–Ø –≤–∞—Å –Ω–µ —É–∑–Ω–∞—é.")
        return

    if text == "—Ä–æ–ª—å" and message.reply_to_message:
        target_id = message.reply_to_message.from_user.id
        role_info = await get_role(target_id)
        if role_info:
            role = role_info.get("role", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            desc = role_info.get("description", "")
            text_response = f"üé≠ *{role}*\n\n_{desc}_"
            await message.reply(text_response, parse_mode="Markdown")
        else:
            await message.reply("–Ø –Ω–µ –∑–Ω–∞—é –∫—Ç–æ —ç—Ç–æ.")
        return

    if text == "—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥":
        await handle_list(message)
        return

    if text == "–∫–ª—É–±":
        await message.answer(
            "üé© <b>–ö–ª—É–± Le Cadeau Noir</b>\n"
            "<i>–í –ø–µ—Ä–µ–≤–æ–¥–µ —Å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ ‚Äî ¬´–ß—ë—Ä–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫¬ª</i>\n\n"
            "üåë <b>–ö–æ–Ω—Ü–µ–ø—Ü–∏—è:</b>\n"
            "–ó–∞–∫—Ä—ã—Ç—ã–π —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π Telegram-–∫–ª—É–± –¥–ª—è —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —Å—Ç–∏–ª—è, —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–∏–ø—Ç–æ–ø–æ–¥–∞—Ä–∫–æ–≤.\n"
            "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª—É–±–∞ –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ (–∏ –∏–Ω–æ–≥–¥–∞ —Ä–µ–∞–ª—å–Ω—ã–º–∏) –ø–æ–¥–∞—Ä–∫–∞–º–∏.\n"
            "–ö–∞–∂–¥—ã–π –ø–æ–¥–∞—Ä–æ–∫ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∂–µ—Å—Ç, –∞ —Å–∏–º–≤–æ–ª —É–≤–∞–∂–µ–Ω–∏—è, —Ñ–ª–∏—Ä—Ç–∞ –∏–ª–∏ –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n"
            "üéì <b>–≠—Ç–∏–∫–µ—Ç:</b>\n"
            "–í—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏, –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç–∏ –∏ —É—Ç–æ–Ω—á—ë–Ω–Ω–æ–≥–æ —à–∏–∫–∞.\n"
            "–ü—Ä—è–º—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è ‚Äî –≤—Å—ë —á–µ—Ä–µ–∑ –Ω–∞–º—ë–∫–∏, —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É –∏ —Å–∏–º–≤–æ–ª—ã.",
            parse_mode="HTML"
        )
        return

    if text == "—Ä–µ–π—Ç–∏–Ω–≥ –∫–ª—É–±–∞":
        await handle_rating(message)
        return

    # üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
    user_has_key = (author_id == KURATOR_ID) or await has_key(author_id)

    # üîë –ö–æ–º–∞–Ω–¥—ã —Å –∫–ª—é—á–æ–º
    if user_has_key:
        if text.startswith("–≤—Ä—É—á–∏—Ç—å "):
            await handle_vruchit(message)
            return
        if text.startswith("–≤–∑—ã—Å–∫–∞—Ç—å "):
            await handle_otnyat(message, text, author_id)
            return
        if text == "—á–ª–µ–Ω—ã –∫–ª—É–±–∞":
            await handle_club_members(message)
            return

    # üëë –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä–∞
    if author_id == KURATOR_ID:
        if text.startswith("–Ω–∞–∑–Ω–∞—á–∏—Ç—å ") and message.reply_to_message:
            await handle_naznachit(message)
            return
        if text == "—Å–Ω—è—Ç—å —Ä–æ–ª—å" and message.reply_to_message:
            await handle_snyat_rol(message)
            return
        if text == "–∫–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞" and message.reply_to_message:
            await handle_kluch(message)
            return
        if text == "—Å–Ω—è—Ç—å –∫–ª—é—á" and message.reply_to_message:
            await handle_snyat_kluch(message)
            return
        if text == "–æ–±–Ω—É–ª–∏—Ç—å –∫–ª—É–±":
            await asyncio.sleep(1)
            await handle_clear_db(message)
            return
        if text.startswith("–æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã"):
            await handle_obnulit_balansy(message)
            return
        if text.startswith("–æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å"):
            await handle_obnulit_balans(message)
            return

    return


async def handle_vruchit(message: types.Message):
    author_id = message.from_user.id
    text = message.text.strip()

    # –í—Ä—É—á–µ–Ω–∏–µ –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        pattern = r"–≤—Ä—É—á–∏—Ç—å\s+(-?\d+)"  # –†–∞–∑—Ä–µ—à–∞–µ–º –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        m = re.match(pattern, text, re.IGNORECASE)
        if not m:
            await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–≤—Ä—É—á–∏—Ç—å 5'")
            return

        amount = int(m.group(1))
        if amount <= 0:
            await message.reply("–Ø –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å –º–∏–Ω—É—Å.")
            return
        recipient = message.reply_to_message.from_user
        recipient_name = recipient.username or recipient.full_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        await change_balance(recipient.id, amount, "–±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", author_id)
        await message.reply(f"–Ø –≤—ã–¥–∞–ª {amount} –Ω—É–∞—Ä–æ–≤ @{recipient_name}")
        return

async def handle_otnyat(message: types.Message, text: str, author_id: int):

    # –û—Ç–Ω—è—Ç—å –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        pattern = r"–≤–∑—ã—Å–∫–∞—Ç—å\s+(-?\d+)"
        m = re.match(pattern, text, re.IGNORECASE)
        if not m:
            await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–æ—Ç–Ω—è—Ç—å 3'")
            return

        amount = int(m.group(1))
        if amount <= 0:
            await message.reply("–Ø –Ω–µ –º–æ–≥—É –æ—Ç–Ω—è—Ç—å –º–∏–Ω—É—Å.")
            return

        recipient_id = message.reply_to_message.from_user.id
        recipient_name = message.reply_to_message.from_user.full_name

        current_balance = await get_balance(recipient_id)
        if amount > current_balance:
            await message.reply(f"–£ {recipient_name} –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω—É–∞—Ä–æ–≤. –ë–∞–ª–∞–Ω—Å: {current_balance}")
            return

        recipient = message.reply_to_message.from_user
        await change_balance(recipient.id, -amount, "–±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", author_id)
        await message.reply(f"–Ø –≤–∑—ã—Å–∫–∞–ª {amount} –Ω—É–∞—Ä–æ–≤ —É @{recipient.username or recipient.full_name}")
        return

async def handle_naznachit(message: types.Message):
    author_id = message.from_user.id
    text = message.text.strip()
    # –§–æ—Ä–º–∞—Ç: –Ω–∞–∑–Ω–∞—á–∏—Ç—å "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏" –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏
    pattern = r'–Ω–∞–∑–Ω–∞—á–∏—Ç—å\s+"([^"]+)"\s+(.+)'
    m = re.match(pattern, text, re.IGNORECASE)
    if not m:
        await message.reply('–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª')
        return
    role_name, role_desc = m.groups()

    if not message.reply_to_message:
        await message.reply("–ö–æ–º—É –º–Ω–µ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å, –ö—É—Ä–∞—Ç–æ—Ä?")
        return

    user_id = message.reply_to_message.from_user.id
    await set_role(user_id, role_name, role_desc)
    await message.reply(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å '{role_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.reply_to_message.from_user.username or message.reply_to_message.from_user.full_name}")
    return

async def handle_snyat_rol(message: types.Message):
    author_id = message.from_user.id
    if not message.reply_to_message:
        await message.reply("–ù–æ –∫–æ–≥–æ –º–Ω–µ –ª–∏—à–∏—Ç—å —Ä–æ–ª–∏, –ö—É—Ä–∞—Ç–æ—Ä?")
        return
    user_id = message.reply_to_message.from_user.id
    await set_role(user_id, None, None)
    await message.reply(f"–†–æ–ª—å —Å–Ω—è—Ç–∞ —É @{message.reply_to_message.from_user.username or message.reply_to_message.from_user.full_name}")
    return

async def handle_kluch(message: types.Message):
    author_id = message.from_user.id
    if not message.reply_to_message:
        await message.reply("–ö–æ–º—É –º–Ω–µ –≤—ã–¥–∞—Ç—å –∫–ª—é—á, –ö—É—Ä–∞—Ç–æ—Ä?")
        return
    user_id = message.reply_to_message.from_user.id
    await grant_key(user_id)
    await message.reply(f"–ö–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞ –≤—ã–¥–∞–Ω @{message.reply_to_message.from_user.username or message.reply_to_message.from_user.full_name}")
    return

async def handle_snyat_kluch(message: types.Message):
    author_id = message.from_user.id
    if not message.reply_to_message:
        await message.reply("–£ –∫–æ–≥–æ –º–Ω–µ –æ—Ç–æ–±—Ä–∞—Ç—å –∫–ª—é—á, –ö—É—Ä–∞—Ç–æ—Ä?")
        return
    user_id = message.reply_to_message.from_user.id
    await revoke_key(user_id)
    await message.reply(f"–ö–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞ –æ—Ç–Ω—è—Ç —É @{message.reply_to_message.from_user.username or message.reply_to_message.from_user.full_name}")

async def handle_list(message: types.Message):
    try:
        with open("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.txt", "r", encoding="utf-8") as file:
            help_text = file.read()
        await message.reply(help_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ help.txt: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")

async def find_member_by_username(message: types.Message, username: str):
    chat = message.chat
    admins = await message.bot.get_chat_administrators(chat.id)
    for admin in admins:
        if admin.user.username and admin.user.username.lower() == username.lower():
            return admin
    return None

async def handle_rating(message: types.Message):
    rows = await get_top_users(limit=10)
    if not rows:
        await message.reply("–ù–∏ —É –∫–æ–≥–æ –≤ –∫–ª—É–±–µ –Ω–µ—Ç –Ω—É–∞—Ä–æ–≤.")
        return

    text = "üèÜ –ë–æ–≥–∞—Ç–µ–π—à–∏–µ —á–ª–µ–Ω—ã –∫–ª—É–±–∞ Le Cadeau Noir:\n\n"
    for i, (user_id, balance) in enumerate(rows, start=1):
        try:
            user = await message.bot.get_chat(user_id)
            name = user.first_name
        except Exception:
            name = "–£—á–∞—Å—Ç–Ω–∏–∫"

        text += f"{i}. <a href='tg://user?id={user_id}'>{name}</a> ‚Äî {balance} –Ω—É–∞—Ä–æ–≤\n"

    await message.reply(text, parse_mode="HTML")

async def handle_club_members(message: types.Message):
    rows = await get_all_roles()
    if not rows:
        await message.reply("–ü–æ–∫–∞ —á—Ç–æ –≤ –∫–ª—É–±–µ –ø—É—Å—Ç–æ.")
        return

    lines = []
    for user_id, role in rows:
        # –ü–æ–ª—É—á–∞–µ–º username, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        try:
            user = await message.bot.get_chat_member(message.chat.id, user_id)
            if user.user.username:
                mention = f"@{user.user.username}"
            else:
                mention = f"<a href='tg://user?id={user_id}'>–£—á–∞—Å—Ç–Ω–∏–∫</a>"
        except:
            mention = f"<a href='tg://user?id={user_id}'>–£—á–∞—Å—Ç–Ω–∏–∫</a>"

        lines.append(f"{mention} ‚Äî <b>{role}</b>")

    text = "üé≠ <b>–ß–ª–µ–Ω—ã –∫–ª—É–±–∞:</b>\n\n" + "\n".join(lines)
    await message.reply(text, parse_mode="HTML")


async def handle_clear_db(message):
    # –¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä (–ø–æ ID) –º–æ–∂–µ—Ç –æ–±–Ω—É–ª–∏—Ç—å –∫–ª—É–±
    if message.from_user.id != 164059195:
        await message.reply("–¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω—É–ª–∏—Ç—å –∫–ª—É–±.")
        return

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await message.reply("–ö–ª—É–± –æ–±–Ω—É–ª—è–µ—Ç—Å—è...")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        if os.path.exists("/data/bot_data.sqlite"):
            os.remove("/data/bot_data.sqlite")

        await message.answer("–ö–æ–¥ –ê—Ä–º–∞–≥–µ–¥–æ–Ω. –ö–ª—É–± –æ–±–Ω—É–ª–µ–Ω. –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —è –∏ –≤—ã, –ö—É—Ä–∞—Ç–æ—Ä.")

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        os.execv(sys.executable, [sys.executable] + sys.argv)
        return

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏: {e}")

# –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
async def handle_obnulit_balans(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ß—Ç–æ–±—ã –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return
    user_id = message.reply_to_message.from_user.id
    await reset_user_balance(user_id)
    await message.reply("–ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–±–Ω—É–ª—ë–Ω.")

# –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async def handle_obnulit_balansy(message: types.Message):
    await reset_all_balances()
    await message.reply("–í—Å–µ –±–∞–ª–∞–Ω—Å—ã –æ–±–Ω—É–ª–µ–Ω—ã.")