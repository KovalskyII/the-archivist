import re
from aiogram import types
from db import (
    get_balance, change_balance, set_role, get_role,
    grant_key, revoke_key, has_key, get_last_history
)

KURATOR_ID = 164059195

async def handle_message(message: types.Message):
    if not message.text:
        return
    text = message.text.lower().strip()
    author_id = message.from_user.id

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    if author_id == (await message.bot.get_me()).id:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∞–≤—Ç–æ—Ä–∞ –∫–ª—é—á (–ø–æ–ª–Ω–æ–º–æ—á–∏—è)
    user_has_key = (author_id == KURATOR_ID) or await has_key(author_id)

    # –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä—É –∏ –æ–±–ª–∞–¥–∞—Ç–µ–ª—è–º –∫–ª—é—á–∞
    if user_has_key:
        if text.startswith("–≤—Ä—É—á–∏—Ç—å "):
            await handle_vruchit(message)
            return
        if text.startswith("–≤–∑—ã—Å–∫–∞—Ç—å "):
            await handle_otnyat(message, text, author_id)
            return

    # –¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä ‚Äî –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –∏ –∫–ª—é—á–∞–º–∏
    if author_id == KURATOR_ID:
        if text.startswith("–Ω–∞–∑–Ω–∞—á–∏—Ç—å ") and message.reply_to_message:
            await handle_naznachit(message)
            return
        if text == "—Å–Ω—è—Ç—å —Ä–æ–ª—å" and message.reply_to_message:
            await handle_snyat_rol(message)
            return
        if text == "–∫–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞" and message.reply_to_message:
            await handle_kluch(message)
            return
        if text == "—Å–Ω—è—Ç—å –∫–ª—é—á" and message.reply_to_message:
            await handle_snyat_kluch(message)
            return

    # –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–º
    if text == "–º–æ–π –∫–∞—Ä–º–∞–Ω":
        bal = await get_balance(author_id)
        await message.reply(f"–£ –í–∞—Å –≤ –∫–∞—Ä–º–∞–Ω–µ {bal} –Ω—É–∞—Ä–æ–≤.")
        return
    if text == "–º–æ—è —Ä–æ–ª—å":
        role_info = await get_role(author_id)
        if role_info:
            role = role_info.get("role", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            desc = role_info.get("description", "")
            text_response = f"üé≠ *{role}*\n\n_{desc}_"
            await message.reply(text_response, parse_mode="Markdown")
        else:
            await message.reply("–Ø –≤–∞—Å –Ω–µ —É–∑–Ω–∞—é.")
        return

    if text == "—Ä–æ–ª—å" and message.reply_to_message:
        target_id = message.reply_to_message.from_user.id
        role_info = await get_role(target_id)
        if role_info:
            role = role_info.get("role", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            desc = role_info.get("description", "")
            text_response = f"üé≠ *{role}*\n\n_{desc}_"
            await message.reply(text_response, parse_mode="Markdown")
        else:
            await message.reply("–Ø –Ω–µ –∑–Ω–∞—é –∫—Ç–æ —ç—Ç–æ.")
    if text == "—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥":
        await handle_list(message)
        return

    return

async def handle_vruchit(message: types.Message):
    author_id = message.from_user.id
    text = message.text.strip()

    # –í—Ä—É—á–µ–Ω–∏–µ –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        pattern = r"–≤—Ä—É—á–∏—Ç—å\s+(-?\d+)"  # –†–∞–∑—Ä–µ—à–∞–µ–º –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        m = re.match(pattern, text, re.IGNORECASE)
        if not m:
            await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–≤—Ä—É—á–∏—Ç—å 5'")
            return

        amount = int(m.group(1))
        if amount <= 0:
            await message.reply("–Ø –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å –º–∏–Ω—É—Å.")
            return
        recipient = message.reply_to_message.from_user
        await change_balance(recipient.id, amount, "–±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", author_id)
        await message.reply(f"–Ø –≤—ã–¥–∞–ª {amount} –Ω—É–∞—Ä–æ–≤ @{recipient.username or recipient.full_name}")
        return

async def handle_otnyat(message: types.Message, text: str, author_id: int):

    # –û—Ç–Ω—è—Ç—å –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        pattern = r"–≤–∑—ã—Å–∫–∞—Ç—å\s+(-?\d+)"
        m = re.match(pattern, text, re.IGNORECASE)
        if not m:
            await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–æ—Ç–Ω—è—Ç—å 3'")
            return

        amount = int(m.group(1))
        if amount <= 0:
            await message.reply("–Ø –Ω–µ –º–æ–≥—É –æ—Ç–Ω—è—Ç—å –º–∏–Ω—É—Å.")
            return

        recipient_id = message.reply_to_message.from_user.id
        recipient_name = message.reply_to_message.from_user.full_name

        current_balance = await get_balance(recipient_id)
        if amount > current_balance:
            await message.reply(f"–£ {recipient_name} –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω—É–∞—Ä–æ–≤. –ë–∞–ª–∞–Ω—Å: {current_balance}")
            return

        recipient = message.reply_to_message.from_user
        await change_balance(recipient.id, -amount, "–±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", author_id)
        await message.reply(f"–Ø –≤–∑—ã—Å–∫–∞–ª {amount} –Ω—É–∞—Ä–æ–≤ —É @{recipient.username or recipient.full_name}")
        return

async def handle_naznachit(message: types.Message):
    author_id = message.from_user.id
    text = message.text.strip()
    # –§–æ—Ä–º–∞—Ç: –Ω–∞–∑–Ω–∞—á–∏—Ç—å "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏" –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏
    pattern = r'–Ω–∞–∑–Ω–∞—á–∏—Ç—å\s+"([^"]+)"\s+(.+)'
    m = re.match(pattern, text, re.IGNORECASE)
    if not m:
        await message.reply('–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª')
        return
    role_name, role_desc = m.groups()

    if not message.reply_to_message:
        await message.reply("–ö–æ–º—É –º–Ω–µ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å, –ö—É—Ä–∞—Ç–æ—Ä?")
        return

    user_id = message.reply_to_message.from_user.id
    await set_role(user_id, role_name, role_desc)
    await message.reply(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å '{role_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.reply_to_message.from_user.username or message.reply_to_message.from_user.full_name}")

async def handle_snyat_rol(message: types.Message):
    author_id = message.from_user.id
    if not message.reply_to_message:
        await message.reply("–ù–æ –∫–æ–≥–æ –º–Ω–µ –ª–∏—à–∏—Ç—å —Ä–æ–ª–∏, –ö—É—Ä–∞—Ç–æ—Ä?")
        return
    user_id = message.reply_to_message.from_user.id
    await set_role(user_id, None, None)
    await message.reply(f"–†–æ–ª—å —Å–Ω—è—Ç–∞ —É @{message.reply_to_message.from_user.username or message.reply_to_message.from_user.full_name}")

async def handle_kluch(message: types.Message):
    author_id = message.from_user.id
    if not message.reply_to_message:
        await message.reply("–ö–æ–º—É –º–Ω–µ –≤—ã–¥–∞—Ç—å –∫–ª—é—á, –ö—É—Ä–∞—Ç–æ—Ä?")
        return
    user_id = message.reply_to_message.from_user.id
    await grant_key(user_id)
    await message.reply(f"–ö–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞ –≤—ã–¥–∞–Ω @{message.reply_to_message.from_user.username or message.reply_to_message.from_user.full_name}")

async def handle_snyat_kluch(message: types.Message):
    author_id = message.from_user.id
    if not message.reply_to_message:
        await message.reply("–£ –∫–æ–≥–æ –º–Ω–µ –æ—Ç–æ–±—Ä–∞—Ç—å –∫–ª—é—á, –ö—É—Ä–∞—Ç–æ—Ä?")
        return
    user_id = message.reply_to_message.from_user.id
    await revoke_key(user_id)
    await message.reply(f"–ö–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞ –æ—Ç–Ω—è—Ç —É @{message.reply_to_message.from_user.username or message.reply_to_message.from_user.full_name}")

async def handle_list(message: types.Message):
    try:
        with open("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.txt", "r", encoding="utf-8") as file:
            help_text = file.read()
        await message.reply(help_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ help.txt: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")

async def find_member_by_username(message: types.Message, username: str):
    chat = message.chat
    admins = await message.bot.get_chat_administrators(chat.id)
    for admin in admins:
        if admin.user.username and admin.user.username.lower() == username.lower():
            return admin
    return None
