import re
import os
import sys
import asyncio
import random
from typing import List, Tuple

from aiogram import types
from aiogram.types import FSInputFile

from db import (
    # –±–∞–∑–æ–≤—ã–µ
    get_balance, change_balance, set_role, get_role,
    grant_key, revoke_key, has_key, get_last_history,
    get_top_users, get_all_roles, reset_user_balance,
    reset_all_balances, set_role_image, get_role_with_image,
    get_key_holders, get_known_users,

    # –∞–Ω—Ç–∏-–¥—É–±–ª—å
    is_msg_processed, mark_msg_processed,

    # –ø–µ—Ä–∫–∏
    grant_perk, revoke_perk, get_perks, get_perk_holders, get_perks_summary,

    # –ó–ü/–∫—Ä–∞–∂–∞
    get_seconds_since_last_salary_claim, record_salary_claim,
    get_seconds_since_last_theft, record_theft,

    # —ç–∫–æ–Ω–æ–º–∏–∫–∞/—Å–µ–π—Ñ
    vault_init, get_economy_stats, get_last_vault_cap,
    get_burn_bps, set_burn_bps, get_income, set_income,

    # –∫–æ–Ω—Ñ–∏–≥–∏ –∏–≥—Ä/–ª–∏–º–∏—Ç–æ–≤/—Ü–µ–Ω
    get_multipliers, set_multiplier, get_casino_on, set_casino_on,
    get_limit_bet, set_limit_bet, get_limit_rain, set_limit_rain,
    get_price_emerald, set_price_emerald, get_price_perk, set_price_perk,

    # —Ä—ã–Ω–æ–∫
    create_offer, cancel_offer, list_active_offers, record_burn,
)

KURATOR_ID = 164059195
DB_PATH = "/data/bot_data.sqlite"

# –ö–æ–¥ –ø–µ—Ä–∫–∞ -> (—ç–º–æ–¥–∂–∏, —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
PERK_REGISTRY = {
    "–∏–º–º—É–Ω–∏—Ç–µ—Ç": ("üõ°Ô∏è", "–ò–º–º—É–Ω–∏—Ç–µ—Ç –∫ –±–∞–Ω—É"),
    "–∑–ø": ("üíµ", "–ó–∞—Ä–ø–ª–∞—Ç–∞ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)"),
    "–≤–æ—Ä": ("üó°Ô∏è", "–°–≤–æ—Ä–æ–≤–∞—Ç—å –Ω—É–∞—Ä—ã (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)"),
}

def mention_html(user_id: int, fallback: str = "–£—á–∞—Å—Ç–Ω–∏–∫") -> str:
    safe = html.escape(fallback, quote=False)
    return f"<a href='tg://user?id={user_id}'>{safe}</a>"

def render_perks(perk_codes: set[str]) -> str:
    if not perk_codes:
        return "–£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä–∫–æ–≤."
    lines = ["–í–∞—à–∏ –ø–µ—Ä–∫–∏:"]
    items = []
    for code in perk_codes:
        meta = PERK_REGISTRY.get(code)
        if meta:
            emoji, title = meta
            items.append((title.lower(), f"{emoji} {title}"))
        else:
            items.append((code, f"‚Ä¢ {code}"))
    for _, line in sorted(items):
        lines.append(line)
    return "\n".join(lines)

# -------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã --------

def fmt_money(n: int) -> str:
    return f"ü™ô{n} –Ω—É–∞—Ä–æ–≤"

def fmt_percent_bps(bps: int) -> str:
    # 100 bps = 1%
    whole = bps // 100
    frac = bps % 100
    return f"{whole}.{frac:02d}%"

# --------- –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---------

async def handle_message(message: types.Message):
    if not message.text:
        return

    # –∞–Ω—Ç–∏-–¥—É–±–ª—å –Ω–∞ ¬´–∫–æ–º–∞–Ω–¥—ã¬ª (idempotency –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É message_id)
    if await is_msg_processed(message.chat.id, message.message_id):
        return
    await mark_msg_processed(message.chat.id, message.message_id)

    text = message.text.strip()
    text_l = text.lower()
    author_id = message.from_user.id

    if message.from_user.is_bot:
        return

    # ======= –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö =======

    if text_l == "–º–æ–π –∫–∞—Ä–º–∞–Ω":
        bal = await get_balance(author_id)
        await message.reply(f"–£ –í–∞—Å –≤ –∫–∞—Ä–º–∞–Ω–µ {fmt_money(bal)}.")
        return

    if text_l == "–º–æ—è —Ä–æ–ª—å":
        await handle_my_role(message)
        return

    if text_l == "—Ä–æ–ª—å" and message.reply_to_message:
        await handle_who_role(message)
        return

    if text_l in ("—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", "–∫–æ–º–∞–Ω–¥—ã"):
        await handle_commands_catalog(message)
        return

    if text_l == "–∫–ª—É–±":
        await message.answer(
            "üé© <b>–ö–ª—É–± Le Cadeau Noir</b>\n"
            "<i>–í –ø–µ—Ä–µ–≤–æ–¥–µ —Å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ ‚Äî ¬´–ß—ë—Ä–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫¬ª</i>\n\n"
            "üåë <b>–ö–æ–Ω—Ü–µ–ø—Ü–∏—è:</b>\n"
            "–ó–∞–∫—Ä—ã—Ç—ã–π —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π Telegram-–∫–ª—É–± –¥–ª—è —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —Å—Ç–∏–ª—è, —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–∏–ø—Ç–æ–ø–æ–¥–∞—Ä–∫–æ–≤.\n"
            "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª—É–±–∞ –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ (–∏ –∏–Ω–æ–≥–¥–∞ —Ä–µ–∞–ª—å–Ω—ã–º–∏) –ø–æ–¥–∞—Ä–∫–∞–º–∏.\n"
            "–ö–∞–∂–¥—ã–π –ø–æ–¥–∞—Ä–æ–∫ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∂–µ—Å—Ç, –∞ —Å–∏–º–≤–æ–ª —É–≤–∞–∂–µ–Ω–∏—è, —Ñ–ª–∏—Ä—Ç–∞ –∏–ª–∏ –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n"
            "üéì <b>–≠—Ç–∏–∫–µ—Ç:</b>\n"
            "–í—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏, –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç–∏ –∏ —É—Ç–æ–Ω—á—ë–Ω–Ω–æ–≥–æ —à–∏–∫–∞.\n"
            "–ü—Ä—è–º—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è ‚Äî –≤—Å—ë —á–µ—Ä–µ–∑ –Ω–∞–º—ë–∫–∏, —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É –∏ —Å–∏–º–≤–æ–ª—ã.",
            parse_mode="HTML"
        )
        return

    if text_l == "—Ä–µ–π—Ç–∏–Ω–≥ –∫–ª—É–±–∞":
        await handle_rating(message)
        return

    if text_l == "—á–ª–µ–Ω—ã –∫–ª—É–±–∞":
        await handle_club_members(message)
        return

    if text_l == "—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ –∫–ª—é—á–∞":
        await handle_key_holders_cmd(message)
        return

    if text_l.startswith("–ø–µ—Ä–µ–¥–∞—Ç—å "):
        await handle_peredat(message)
        return

    if text_l.startswith("—Å—Ç–∞–≤–ª—é"):
        await handle_kubik(message)
        return

    if text_l == "–º–æ–∏ –ø–µ—Ä–∫–∏":
        await handle_my_perks(message)
        return

    if text_l == "–ø–µ—Ä–∫–∏" and message.reply_to_message:
        await handle_perks_of(message)
        return

    if text_l == "–ø–æ–ª—É—á–∏—Ç—å –∑–ø":
        await handle_salary_claim(message)
        return

    if text_l.startswith("–¥–æ–∂–¥—å "):
        await handle_dozhd(message)
        return

    # —Ä—ã–Ω–æ–∫
    if text_l == "—Ä—ã–Ω–æ–∫":
        await handle_market_show(message)
        return

    if text_l == "–∫—É–ø–∏—Ç—å —ç–º–µ—Ä–∞–ª—å–¥":
        await handle_buy_emerald(message)
        return

    m = re.match(r"^–∫—É–ø–∏—Ç—å\s+–ø–µ—Ä–∫\s+(.+)$", text_l)
    if m:
        code = m.group(1).strip()
        await handle_buy_perk(message, code)
        return

    m = re.match(r"^–≤—ã—Å—Ç–∞–≤–∏—Ç—å\s+(\S+)\s+(\d+)$", text_l)
    if m:
        await handle_offer_create(message, m.group(1), int(m.group(2)))
        return

    m = re.match(r"^–∫—É–ø–∏—Ç—å\s+(\d+)$", text_l)
    if m:
        await handle_offer_buy(message, int(m.group(1)))
        return

    m = re.match(r"^—Å–Ω—è—Ç—å\s+–ª–æ—Ç\s+(\d+)$", text_l)
    if m:
        await handle_offer_cancel(message, int(m.group(1)))
        return

    # –∫—Ä–∞–∂–∞
    if text_l in ("—É–∫—Ä–∞—Å—Ç—å", "—Å–≤–æ—Ä–æ–≤–∞—Ç—å") and message.reply_to_message:
        await handle_theft(message)
        return

    # —ç–∫–æ–Ω–æ–º–∏–∫–∞/—Å–µ–π—Ñ
    if text_l.startswith("–≤–∫–ª—é—á–∏—Ç—å —Å–µ–π—Ñ"):
        await handle_vault_enable(message)
        return

    if text_l.startswith("–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—Ñ"):
        await handle_vault_reset(message)
        return

    if text_l == "—Å–µ–π—Ñ":
        await handle_vault_stats(message)
        return

    # –∫–æ–Ω—Ñ–∏–≥–∏
    m = re.match(r"^—Å–∂–∏–≥–∞–Ω–∏–µ\s+(\d+)$", text_l)
    if m and author_id == KURATOR_ID:
        await handle_burn_bps_set(message, int(m.group(1)))
        return

    m = re.match(r"^—Ü–µ–Ω–∞\s+—ç–º–µ—Ä–∞–ª—å–¥\s+(\d+)$", text_l)
    if m and author_id == KURATOR_ID:
        await handle_price_emerald_set(message, int(m.group(1)))
        return

    m = re.match(r"^—Ü–µ–Ω–∞\s+–ø–µ—Ä–∫\s+(\S+)\s+(\d+)$", text_l)
    if m and author_id == KURATOR_ID:
        await handle_price_perk_set(message, m.group(1), int(m.group(2)))
        return

    m = re.match(r"^–º–Ω–æ–∂–∏—Ç–µ–ª—å\s+(–∫—É–±–∏–∫|–¥–∞—Ä—Ç—Å|–±–æ—É–ª–∏–Ω–≥|–∞–≤—Ç–æ–º–∞—Ç—ã)\s+(\d+)$", text_l)
    if m and author_id == KURATOR_ID:
        await handle_multiplier_set(message, m.group(1), int(m.group(2)))
        return

    if text_l in ("–∫–∞–∑–∏–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å", "–∫–∞–∑–∏–Ω–æ –∑–∞–∫—Ä—ã—Ç—å") and author_id == KURATOR_ID:
        await handle_casino_toggle(message)
        return

    m = re.match(r"^–¥–æ—Ö–æ–¥—ã\s+(\d+)$", text_l)
    if m and author_id == KURATOR_ID:
        await handle_income_set(message, int(m.group(1)))
        return

    m = re.match(r"^–ª–∏–º–∏—Ç\s+—Å—Ç–∞–≤–∫–∞\s+(\d+)$", text_l)
    if m and author_id == KURATOR_ID:
        await handle_limit_bet_set(message, int(m.group(1)))
        return

    m = re.match(r"^–ª–∏–º–∏—Ç\s+–¥–æ–∂–¥—å\s+(\d+)$", text_l)
    if m and author_id == KURATOR_ID:
        await handle_limit_rain_set(message, int(m.group(1)))
        return

    # –¥–µ—Ä–∂–∞—Ç–µ–ª–∏ –ø–µ—Ä–∫–∞ / —Ä–µ–µ—Å—Ç—Ä
    m = re.match(r"^(?:—É –∫–æ–≥–æ –ø–µ—Ä–∫|–¥–µ—Ä–∂–∞—Ç–µ–ª–∏ –ø–µ—Ä–∫–∞)\s+(\S+)$", text_l)
    if m and author_id == KURATOR_ID:
        await handle_perk_holders_list(message, m.group(1))
        return

    if text_l == "–ø–µ—Ä–∫–∏ —Ä–µ–µ—Å—Ç—Ä" and author_id == KURATOR_ID:
        await handle_perk_registry(message)
        return

    # ======= –ö–æ–º–∞–Ω–¥—ã —Å –∫–ª—é—á–æ–º =======
    user_has_key = (author_id == KURATOR_ID) or await has_key(author_id)

    if user_has_key:
        if re.match(r"^(–≤—Ä—É—á–∏—Ç—å|–≤—ã–¥–∞—Ç—å)\s+(-?\d+)$", text_l):
            await handle_vruchit(message)
            return
        if re.match(r"^(–≤–∑—ã—Å–∫–∞—Ç—å|–æ—Ç–Ω—è—Ç—å)\s+(-?\d+)$", text_l):
            await handle_otnyat(message, text_l, author_id)
            return
        if text_l == "–∫–∞—Ä–º–∞–Ω":
            await handle_kurator_karman(message)
            return

    # ======= –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –ö—É—Ä–∞—Ç–æ—Ä–∞ =======
    if author_id == KURATOR_ID:
        if text_l.startswith("–Ω–∞–∑–Ω–∞—á–∏—Ç—å ") and message.reply_to_message:
            await handle_naznachit(message)
            return
        if text_l == "—Å–Ω—è—Ç—å —Ä–æ–ª—å" and message.reply_to_message:
            await handle_snyat_rol(message)
            return
        if text_l == "–∫–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞" and message.reply_to_message:
            await handle_kluch(message)
            return
        if text_l == "—Å–Ω—è—Ç—å –∫–ª—é—á" and message.reply_to_message:
            await handle_snyat_kluch(message)
            return
        if text_l == "–æ–±–Ω—É–ª–∏—Ç—å –∫–ª—É–±":
            await asyncio.sleep(1)
            await handle_clear_db(message)
            return
        if text_l.startswith("–æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã"):
            await handle_obnulit_balansy(message)
            return
        if text_l.startswith("–æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å"):
            await handle_obnulit_balans(message)
            return
        if text_l.startswith("–¥–∞—Ä–æ–≤–∞—Ç—å ") and message.reply_to_message:
            code = text_l.split(" ", 1)[1].strip()
            if code in PERK_REGISTRY:
                await handle_grant_perk_universal(message, code)
                return
        if text_l.startswith("—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å ") and message.reply_to_message:
            code = text_l.split(" ", 1)[1].strip()
            if code in PERK_REGISTRY:
                await handle_revoke_perk_universal(message, code)
                return

# ---------- –±–∞–∑–æ–≤—ã–µ –∫—É—Å–∫–∏ (—Ä–æ–ª—ã, —Ñ–æ—Ç–æ, —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ —Ç.–ø.) ----------

async def handle_photo_command(message: types.Message):
    if message.from_user.id != KURATOR_ID:
        return
    if not (message.caption and message.photo):
        return
    text = message.caption.lower().strip()
    if text.startswith("—Ñ–æ—Ç–æ —Ä–æ–ª–∏") and message.reply_to_message:
        target_user_id = message.reply_to_message.from_user.id
        photo_id = message.photo[-1].file_id
        await set_role_image(target_user_id, photo_id)
        await message.reply("–§–æ—Ç–æ —Ä–æ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

async def handle_my_role(message: types.Message):
    author_id = message.from_user.id
    try:
        role_row = await get_role_with_image(author_id)
    except Exception:
        role_info = await get_role(author_id)
        role_row = (role_info.get("role"), role_info.get("description"), None) if role_info else None
    if role_row:
        role_name, role_desc, image_file_id = role_row
        text_resp = f"üé≠ *{role_name}*\n\n_{role_desc}_"
        if image_file_id:
            await message.reply_photo(photo=image_file_id, caption=text_resp, parse_mode="Markdown")
        else:
            if author_id == KURATOR_ID and os.path.exists("images/kurator.jpg"):
                try:
                    await message.reply_photo(photo=FSInputFile("images/kurator.jpg"), caption=text_resp, parse_mode="Markdown")
                except Exception:
                    await message.reply(text_resp, parse_mode="Markdown")
            else:
                await message.reply(text_resp, parse_mode="Markdown")
    else:
        await message.reply("–Ø –≤–∞—Å –Ω–µ —É–∑–Ω–∞—é.")

async def handle_who_role(message: types.Message):
    target_id = message.reply_to_message.from_user.id
    try:
        role_row = await get_role_with_image(target_id)
    except Exception:
        role_info = await get_role(target_id)
        role_row = (role_info.get("role"), role_info.get("description"), None) if role_info else None
    if role_row:
        role_name, role_desc, image_file_id = role_row
        text_resp = f"üé≠ *{role_name}*\n\n_{role_desc}_"
        if image_file_id:
            await message.reply_photo(photo=image_file_id, caption=text_resp, parse_mode="Markdown")
        else:
            await message.reply(text_resp, parse_mode="Markdown")
    else:
        await message.reply("–Ø –Ω–µ –∑–Ω–∞—é –∫—Ç–æ —ç—Ç–æ.")

async def handle_rating(message: types.Message):
    rows = await get_top_users(limit=10)
    if not rows:
        await message.reply("–ù–∏ —É –∫–æ–≥–æ –≤ –∫–ª—É–±–µ –Ω–µ—Ç –Ω—É–∞—Ä–æ–≤.")
        return
    lines = ["üí∞ –ë–æ–≥–∞—Ç–µ–π—à–∏–µ —á–ª–µ–Ω—ã –∫–ª—É–±–∞ Le Cadeau Noir:\n"]
    for i, (user_id, balance) in enumerate(rows, start=1):
        name = "–£—á–∞—Å—Ç–Ω–∏–∫"
        try:
            member = await message.bot.get_chat_member(message.chat.id, user_id)
            name = member.user.full_name or name
        except Exception:
            pass
        lines.append(f"{i}. {mention_html(user_id, name)} ‚Äî {balance} –Ω—É–∞—Ä–æ–≤")
    await message.reply("\n".join(lines), parse_mode="HTML")

async def handle_club_members(message: types.Message):
    rows = await get_all_roles()
    if not rows:
        await message.reply("–ü–æ–∫–∞ —á—Ç–æ –≤ –∫–ª—É–±–µ –ø—É—Å—Ç–æ.")
        return
    lines = ["üé≠ <b>–ß–ª–µ–Ω—ã –∫–ª—É–±–∞:</b>\n"]
    for user_id, role in rows:
        name = "–£—á–∞—Å—Ç–Ω–∏–∫"
        try:
            member = await message.bot.get_chat_member(message.chat.id, user_id)
            name = member.user.full_name or name
        except Exception:
            pass
        mention = mention_html(user_id, name)
        lines.append(f"{mention} ‚Äî <b>{role}</b>")
    await message.reply("\n".join(lines), parse_mode="HTML")

async def handle_key_holders_cmd(message: types.Message):
    user_ids = await get_key_holders()
    if not user_ids:
        await message.reply("–ü–æ–∫–∞ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –∫–ª—é—á–∞.")
        return
    lines = ["üóùÔ∏è <b>–•—Ä–∞–Ω–∏—Ç–µ–ª–∏ –∫–ª—é—á–∞:</b>\n"]
    for user_id in user_ids:
        name = "–£—á–∞—Å—Ç–Ω–∏–∫"
        try:
            member = await message.bot.get_chat_member(message.chat.id, user_id)
            name = member.user.full_name or name
        except Exception:
            pass
        lines.append(f"{mention_html(user_id, name)}")
    await message.reply("\n".join(lines), parse_mode="HTML")

async def handle_clear_db(message: types.Message):
    if message.from_user.id != KURATOR_ID:
        await message.reply("–¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω—É–ª–∏—Ç—å –∫–ª—É–±.")
        return
    try:
        await message.reply("üóë–ö–ª—É–± –æ–±–Ω—É–ª—è–µ—Ç—Å—è...")
        if os.path.exists(DB_PATH):
            os.remove(DB_PATH)
        await message.answer("üí¢–ö–æ–¥ –ê—Ä–º–∞–≥–µ–¥–æ–Ω. –ö–ª—É–± –æ–±–Ω—É–ª–µ–Ω. –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —è –∏ –≤—ã, –ö—É—Ä–∞—Ç–æ—Ä.")
        os.execv(sys.executable, [sys.executable] + sys.argv)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏: {e}")

async def handle_obnulit_balans(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ß—Ç–æ–±—ã –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return
    user_id = message.reply_to_message.from_user.id
    await reset_user_balance(user_id)
    await message.reply("‚úÖ–ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–±–Ω—É–ª—ë–Ω.")

async def handle_obnulit_balansy(message: types.Message):
    await reset_all_balances()
    await message.reply("‚úÖ–í—Å–µ –±–∞–ª–∞–Ω—Å—ã –æ–±–Ω—É–ª–µ–Ω—ã.")

# ----------- –¥–µ–Ω—å–≥–∏: –≤—Ä—É—á–∏—Ç—å / –≤–∑—ã—Å–∫–∞—Ç—å / –ø–µ—Ä–µ–¥–∞—Ç—å / –¥–æ–∂–¥—å -----------

async def _get_vault_room() -> int:
    stats = await get_economy_stats()
    if not stats:
        return -1  # —Å–µ–π—Ñ –Ω–µ –≤–∫–ª—é—á—ë–Ω
    return stats["vault"]

async def handle_vruchit(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–≤—Ä—É—á–∏—Ç—å 5' (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞)")
        return
    m = re.match(r"(?:–≤—Ä—É—á–∏—Ç—å|–≤—ã–¥–∞—Ç—å)\s+(-?\d+)", message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–≤—Ä—É—á–∏—Ç—å|–≤—ã–¥–∞—Ç—å 5'")
        return
    amount = int(m.group(1))
    if amount <= 0:
        await message.reply("–Ø –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å –º–∏–Ω—É—Å.")
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–π—Ñ–∞
    room = await _get_vault_room()
    if room == -1:
        await message.reply("–°–µ–π—Ñ –µ—â—ë –Ω–µ –≤–∫–ª—é—á—ë–Ω. –ö–æ–º–∞–Ω–¥–∞: '–≤–∫–ª—é—á–∏—Ç—å —Å–µ–π—Ñ <CAP>' (–¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞).")
        return
    if amount > room:
        await message.reply(f"–í —Å–µ–π—Ñ–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {room}")
        return

    recipient = message.reply_to_message.from_user
    await change_balance(recipient.id, amount, "–≤—ã–¥–∞—á–∞ –∏–∑ —Å–µ–π—Ñ–∞", message.from_user.id)
    await message.reply(f"üßÆ–Ø –≤—ã–¥–∞–ª {amount} –Ω—É–∞—Ä–æ–≤ {mention_html(recipient.id, recipient.full_name)}", parse_mode="HTML")

async def handle_otnyat(message: types.Message, text: str, author_id: int):
    if not message.reply_to_message:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–≤–∑—ã—Å–∫–∞—Ç—å 3' (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞)")
        return
    m = re.match(r"(?:–≤–∑—ã—Å–∫–∞—Ç—å|–æ—Ç–Ω—è—Ç—å)\s+(-?\d+)", text, re.IGNORECASE)
    if not m:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–≤–∑—ã—Å–∫–∞—Ç—å|–æ—Ç–Ω—è—Ç—å 3'")
        return
    amount = int(m.group(1))
    if amount <= 0:
        await message.reply("–Ø –Ω–µ –º–æ–≥—É –æ—Ç–Ω—è—Ç—å –º–∏–Ω—É—Å.")
        return
    recipient = message.reply_to_message.from_user
    current_balance = await get_balance(recipient.id)
    if amount > current_balance:
        await message.reply(f"–£ {recipient.full_name} –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω—É–∞—Ä–æ–≤. –ë–∞–ª–∞–Ω—Å: {current_balance}")
        return
    await change_balance(recipient.id, -amount, "–≤–∑—ã—Å–∫–∞–Ω–∏–µ –≤ —Å–µ–π—Ñ", author_id)
    await message.reply(f"üßÆ–Ø –≤–∑—ã—Å–∫–∞–ª {amount} –Ω—É–∞—Ä–æ–≤ —É {mention_html(recipient.id, recipient.full_name)}", parse_mode="HTML")

async def handle_peredat(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ß—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∞—Ä—ã, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: '–ø–µ—Ä–µ–¥–∞—Ç—å 10'")
        return
    m = re.match(r"–ø–µ—Ä–µ–¥–∞—Ç—å\s+(\d+)", message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–ø–µ—Ä–µ–¥–∞—Ç—å 10'")
        return
    amount = int(m.group(1))
    if amount <= 0:
        await message.reply("–Ø –Ω–µ –º–æ–≥—É –ø–µ—Ä–µ–¥–∞—Ç—å –º–∏–Ω—É—Å.")
        return
    giver_id = message.from_user.id
    recipient = message.reply_to_message.from_user
    recipient_id = recipient.id
    if giver_id == recipient_id:
        await message.reply("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∞—Ä—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return
    balance = await get_balance(giver_id)
    if amount > balance:
        await message.reply(f"–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –ë–∞–ª–∞–Ω—Å: {balance}")
        return
    await change_balance(giver_id, -amount, "–ø–µ—Ä–µ–¥–∞—á–∞", giver_id)
    await change_balance(recipient_id, amount, "–ø–µ—Ä–µ–¥–∞—á–∞", giver_id)
    await message.reply(
        f"üí∏–Ø –ø–µ—Ä–µ–¥–∞–ª {amount} –Ω—É–∞—Ä–æ–≤ –æ—Ç {mention_html(giver_id, message.from_user.full_name)} –∫ {mention_html(recipient_id, recipient.full_name)}",
        parse_mode="HTML"
    )

async def handle_dozhd(message: types.Message):
    m = re.match(r"^–¥–æ–∂–¥—å\s+(\d+)$", message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–¥–æ–∂–¥—å 10'")
        return
    total = int(m.group(1))
    if total < 5:
        await message.reply("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ–∂–¥—å ‚Äî 5 –Ω—É–∞—Ä–æ–≤.")
        return

    # –ª–∏–º–∏—Ç –¥–æ–∂–¥—è
    max_rain = await get_limit_rain()
    if max_rain and total > max_rain:
        await message.reply(f"–õ–∏–º–∏—Ç –¥–æ–∂–¥—è: –Ω–µ –±–æ–ª–µ–µ {max_rain} –∑–∞ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É.")
        return

    giver_id = message.from_user.id
    bal = await get_balance(giver_id)
    if total > bal:
        await message.reply(f"–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –ë–∞–ª–∞–Ω—Å: {bal}")
        return
    candidate_ids = [uid for uid in await get_known_users() if uid != giver_id]
    eligible = []
    for uid in candidate_ids:
        try:
            member = await message.bot.get_chat_member(message.chat.id, uid)
            if member.status in ("left", "kicked"):
                continue
            if getattr(member.user, "is_bot", False):
                continue
            name = member.user.full_name or "–£—á–∞—Å—Ç–Ω–∏–∫"
            eligible.append((uid, name))
        except Exception:
            continue
    if not eligible:
        await message.reply("–ù–µ–∫–æ–≥–æ –Ω–∞–º–æ—á–∏—Ç—å ‚Äî —è –Ω–µ –≤–∏–∂—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    random.shuffle(eligible)
    recipients = eligible[:5]
    n = len(recipients)
    base = total // n
    rest = total % n
    per_user = [base + (1 if i < rest else 0) for i in range(n)]
    await change_balance(giver_id, -total, "–¥–æ–∂–¥—å", giver_id)
    for (uid, _name), amt in zip(recipients, per_user):
        if amt > 0:
            await change_balance(uid, amt, "–¥–æ–∂–¥—å", giver_id)
    breakdown = [
        f"{mention_html(uid, name)} ‚Äî –Ω–∞–º–æ–∫ –Ω–∞ {amt} –Ω—É–∞—Ä–æ–≤"
        for (uid, name), amt in zip(recipients, per_user) if amt > 0
    ]
    await message.reply("üåß –ü—Ä–æ—à—ë–ª –¥–æ–∂–¥—å. –ù–∞–º–æ–∫–ª–∏: " + ", ".join(breakdown), parse_mode="HTML")

# ------------- –∏–≥—Ä—ã (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∫—É–±–∏–∫, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é) -------------

async def handle_kubik(message: types.Message):
    m = re.match(r"^\s*—Å—Ç–∞–≤–ª—é\s+(\d+)\s+–Ω–∞\s+(?:üé≤|–∫—É–±–∏–∫)\s*$", message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–°—Ç–∞–≤–ª—é 10 –Ω–∞ üé≤|–∫—É–±–∏–∫'")
        return
    # –∫–∞–∑–∏–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if not await get_casino_on():
        await message.reply("üé∞ –ö–∞–∑–∏–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")
        return
    amount = int(m.group(1))
    if amount <= 0:
        await message.reply("–Ø –Ω–µ –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É.")
        return
    # –ª–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏
    max_bet = await get_limit_bet()
    if max_bet and amount > max_bet:
        await message.reply(f"–õ–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏: –Ω–µ –±–æ–ª–µ–µ {max_bet}.")
        return

    gambler_id = message.from_user.id
    balance = await get_balance(gambler_id)
    if amount > balance:
        await message.reply(f"üîç–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –ë–∞–ª–∞–Ω—Å: {balance}")
        return

    mults = await get_multipliers()
    win_mult = mults["dice"]
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–π—Ñ–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –≤—ã–ø–ª–∞—Ç—É
    room = await _get_vault_room()
    if room == -1:
        await message.reply("–°–µ–π—Ñ –µ—â—ë –Ω–µ –≤–∫–ª—é—á—ë–Ω.")
        return
    potential = amount * win_mult
    if potential > room:
        await message.reply("–ö–∞–∑–∏–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ –Ω–∞ –ø–µ—Ä–µ—É—á—ë—Ç ‚Äî –≤ —Å–µ–π—Ñ–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–∞–∫–æ–π –≤—ã–ø–ª–∞—Ç—ã.")
        return

    sent: types.Message = await message.answer_dice(emoji="üé≤")
    roll_value = sent.dice.value
    await asyncio.sleep(3.5)
    if roll_value == 6:
        await change_balance(gambler_id, amount * win_mult, "—Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä—ã—à (–∫—É–±–∏–∫)", gambler_id)
        await message.reply(
            f"üéâ–§–æ—Ä—Ç—É–Ω–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, {mention_html(gambler_id, message.from_user.full_name)}. "
            f"–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {fmt_money(amount * win_mult)}",
            parse_mode="HTML"
        )
    else:
        await change_balance(gambler_id, -amount, "—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã—à (–∫—É–±–∏–∫)", gambler_id)
        await message.reply(
            f"ü™¶–°—Ç–∞–≤–∫–∏ –ø–æ–≥—É–±—è—Ç –≤–∞—Å, {mention_html(gambler_id, message.from_user.full_name)}. "
            f"–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {fmt_money(amount)}.",
            parse_mode="HTML"
        )

# ------------- –ø–µ—Ä–∫–∏: –º–æ–∏/—á—É–∂–∏–µ, –¥–∞—Ä–æ–≤–∞—Ç—å/—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å, –ó–ü, –≤–æ—Ä -------------

async def handle_my_perks(message: types.Message):
    perk_codes = await get_perks(message.from_user.id)
    await message.reply(render_perks(perk_codes))

async def handle_perks_of(message: types.Message):
    target = message.reply_to_message.from_user
    perk_codes = await get_perks(target.id)
    if not perk_codes:
        await message.reply(f"–£ {target.full_name} –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä–∫–æ–≤.")
        return
    lines = [f"–ü–µ—Ä–∫–∏ {mention_html(target.id, target.full_name)}:"]
    items = []
    for code in perk_codes:
        meta = PERK_REGISTRY.get(code)
        if meta:
            emoji, title = meta
            items.append((title.lower(), f"{emoji} {title}"))
        else:
            items.append((code, f"‚Ä¢ {code}"))
    for _, line in sorted(items):
        lines.append(line)
    await message.reply("\n".join(lines), parse_mode="HTML")

async def handle_grant_perk_universal(message: types.Message, code: str):
    if not message.reply_to_message:
        await message.reply("–î–∞—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∫ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return
    target = message.reply_to_message.from_user
    perks = await get_perks(target.id)
    emoji, title = PERK_REGISTRY.get(code, ("", code))
    if code in perks:
        await message.reply(f"–£ {mention_html(target.id, target.full_name)} —É–∂–µ –µ—Å—Ç—å ¬´{title}¬ª.", parse_mode="HTML")
        return
    await grant_perk(target.id, code)
    await message.reply(f"–ü–µ—Ä–∫ ¬´{title}¬ª –¥–∞—Ä–æ–≤–∞–Ω {mention_html(target.id, target.full_name)}.", parse_mode="HTML")

async def handle_revoke_perk_universal(message: types.Message, code: str):
    if not message.reply_to_message:
        await message.reply("–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –ø–µ—Ä–∫ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return
    target = message.reply_to_message.from_user
    perks = await get_perks(target.id)
    emoji, title = PERK_REGISTRY.get(code, ("", code))
    if code not in perks:
        await message.reply(f"–£ {mention_html(target.id, target.full_name)} –Ω–µ—Ç –ø–µ—Ä–∫–∞ ¬´{title}¬ª.", parse_mode="HTML")
        return
    await revoke_perk(target.id, code)
    await message.reply(f"–ü–µ—Ä–∫ ¬´{title}¬ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω —É {mention_html(target.id, target.full_name)}.", parse_mode="HTML")

async def handle_salary_claim(message: types.Message):
    user_id = message.from_user.id
    perks = await get_perks(user_id)
    if "–∑–ø" not in perks:
        await message.reply("–£ –í–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏.")
        return
    seconds = await get_seconds_since_last_salary_claim(user_id, "–∑–ø")
    COOLDOWN = 24 * 60 * 60
    if seconds is not None and seconds < COOLDOWN:
        remain = COOLDOWN - seconds
        hours = remain // 3600
        minutes = (remain % 3600) // 60
        await message.reply(f"–ó–∞—Ä–ø–ª–∞—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–Ω–æ ‚Äî —á–µ—Ä–µ–∑ {hours}—á {minutes}–º.")
        return
    income = await get_income()
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–π—Ñ–∞
    room = await _get_vault_room()
    if room == -1:
        await message.reply("–°–µ–π—Ñ –µ—â—ë –Ω–µ –≤–∫–ª—é—á—ë–Ω.")
        return
    if income > room:
        await message.reply("–í —Å–µ–π—Ñ–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã ¬´–∑–ø¬ª.")
        return
    await record_salary_claim(user_id, income, "–∑–ø")
    await change_balance(user_id, income, "–∑–ø", user_id)
    await message.reply(f"üíµ –ù–∞—á–∏—Å–ª–µ–Ω–æ {income} –Ω—É–∞—Ä–æ–≤ –ø–æ –ø–µ—Ä–∫—É ¬´–ó–∞—Ä–ø–ª–∞—Ç–∞¬ª.")    

async def handle_theft(message: types.Message):
    thief_id = message.from_user.id
    perks = await get_perks(thief_id)
    if "–≤–æ—Ä" not in perks:
        await message.reply("–£ –í–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏.")
        return
    if not message.reply_to_message:
        await message.reply("–ö—Ä–∞–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤—ã.")
        return
    victim = message.reply_to_message.from_user
    if victim.is_bot:
        await message.reply("–ö—Ä–∞—Å—Ç—å —É –±–æ—Ç–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ.")
        return
    seconds = await get_seconds_since_last_theft(thief_id)
    COOLDOWN = 24 * 60 * 60
    if seconds is not None and seconds < COOLDOWN:
        remain = COOLDOWN - seconds
        hours = remain // 3600
        minutes = (remain % 3600) // 60
        await message.reply(f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–≤—Ç–æ—Ä–Ω–æ ‚Äî —á–µ—Ä–µ–∑ {hours}—á {minutes}–º.")
        return
    income = await get_income()
    victim_balance = await get_balance(victim.id)
    if victim_balance < income or income <= 0:
        # –Ω–µ—É–¥–∞—á–∞, –∫—É–ª–¥–∞—É–Ω —Ñ–∏–∫—Å–∏—Ä—É–µ–º
        await record_theft(thief_id, 0, victim.id, success=False)
        await message.reply("üêï –°—Ç–æ—Ä–æ–∂–µ–≤—ã–µ —Å–æ–±–∞–∫–∏ –ø–æ–¥–Ω—è–ª–∏ –ª–∞–π ‚Äî –≤–æ—Ä —Ä–µ—Ç–∏—Ä–æ–≤–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")
        return
    # —É—Å–ø–µ—Ö: –ø–µ—Ä–µ–≤–æ–¥ victim -> thief
    await change_balance(victim.id, -income, "–∫—Ä–∞–∂–∞", thief_id)
    await change_balance(thief_id, income, "–∫—Ä–∞–∂–∞", thief_id)
    await record_theft(thief_id, income, victim.id, success=True)
    await message.reply(
        f"üó°Ô∏è {mention_html(thief_id, message.from_user.full_name)} —É–∫—Ä–∞–ª {fmt_money(income)} —É "
        f"{mention_html(victim.id, victim.full_name)}.",
        parse_mode="HTML"
    )

# ------------- —Ä—ã–Ω–æ–∫ -------------

async def handle_market_show(message: types.Message):
    # –≠–º–µ—Ä–∞–ª—å–¥
    price_emerald = await get_price_emerald()
    # –ü–µ—Ä–∫–∏
    perk_lines = []
    for code, (emoji, title) in PERK_REGISTRY.items():
        price = await get_price_perk(code)
        price_str = f"{price} –Ω—É–∞—Ä–æ–≤" if price else "–Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è"
        usage = ""
        if code == "–∑–ø":
            usage = " ‚Äî –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: ¬´–ø–æ–ª—É—á–∏—Ç—å –∑–ø¬ª"
        elif code == "–≤–æ—Ä":
            usage = " ‚Äî –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: ¬´—É–∫—Ä–∞—Å—Ç—å/—Å–≤–æ—Ä–æ–≤–∞—Ç—å¬ª (reply)"
        elif code == "–∏–º–º—É–Ω–∏—Ç–µ—Ç":
            usage = " ‚Äî –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ (–∞–º—É–ª–µ—Ç)"
        perk_lines.append(f"{emoji} <b>{title}</b> ‚Äî {price_str}{usage}\n–ö–æ–º–∞–Ω–¥–∞: –∫—É–ø–∏—Ç—å –ø–µ—Ä–∫ {code}")
    # –û—Ñ—Ñ–µ—Ä—ã
    offers = await list_active_offers()
    offer_lines = []
    for o in offers:
        seller = o["seller_id"]
        price = o["price"]
        link = o["link"] or "(—Å—Å—ã–ª–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞)"
        try:
            member = await message.bot.get_chat_member(message.chat.id, seller)
            seller_name = member.user.username and f"@{member.user.username}" or member.user.full_name
        except Exception:
            seller_name = "–£—á–∞—Å—Ç–Ω–∏–∫"
        offer_lines.append(f"#{o['offer_id']} ‚Äî {link} ‚Äî {price} –Ω—É–∞—Ä–æ–≤ ‚Äî –ø—Ä–æ–¥–∞–≤–µ—Ü: {seller_name} ‚Äî –ö–æ–º–∞–Ω–¥–∞: –∫—É–ø–∏—Ç—å {o['offer_id']}")

    burn_bps = await get_burn_bps()
    txt = (
        "üõí <b>–†—ã–Ω–æ–∫</b>\n\n"
        f"üíé –≠–º–µ—Ä–∞–ª—å–¥ ‚Äî {price_emerald} –Ω—É–∞—Ä–æ–≤ ‚Äî –ö–æ–º–∞–Ω–¥–∞: –∫—É–ø–∏—Ç—å —ç–º–µ—Ä–∞–ª—å–¥\n\n"
        "üéñ <b>–ü–µ—Ä–∫–∏</b>:\n" + ("\n".join(perk_lines) if perk_lines else "–ü—É—Å—Ç–æ") + "\n\n"
        "üì¶ <b>–õ–æ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>:\n" + ("\n".join(offer_lines) if offer_lines else "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤.") + "\n\n"
        f"üî• –°–∂–∏–≥–∞–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–∫–µ: {fmt_percent_bps(burn_bps)} (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑)"
    )
    await message.reply(txt, parse_mode="HTML")

async def handle_offer_create(message: types.Message, link: str, price: int):
    if price <= 0:
        await message.reply("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return
    offer_id = await create_offer(message.from_user.id, link, price)
    await message.reply(f"–õ–æ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. ID: {offer_id}. –°–Ω—è—Ç—å: ¬´—Å–Ω—è—Ç—å –ª–æ—Ç {offer_id}¬ª. –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Ä—ã–Ω–∫–µ.", parse_mode="HTML")

async def handle_offer_cancel(message: types.Message, offer_id: int):
    # —Å–Ω—è—Ç—å –º–æ–∂–µ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∫—É—Ä–∞—Ç–æ—Ä
    offers = await list_active_offers()
    owner_id = None
    for o in offers:
        if o["offer_id"] == offer_id:
            owner_id = o["seller_id"]
            break
    if owner_id is None:
        await message.reply("–¢–∞–∫–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ—Ç–∞ –Ω–µ—Ç.")
        return
    if message.from_user.id != owner_id and message.from_user.id != KURATOR_ID:
        await message.reply("–°–Ω—è—Ç—å –ª–æ—Ç –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –∏–ª–∏ –∫—É—Ä–∞—Ç–æ—Ä.")
        return
    await cancel_offer(offer_id, message.from_user.id)
    await message.reply("–õ–æ—Ç —Å–Ω—è—Ç.")

async def _apply_burn_and_return(price: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ–ª–∏—á–∏–Ω—É burn –ø–æ —Ç–µ–∫—É—â–µ–º—É bps (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑)."""
    bps = await get_burn_bps()
    return (price * bps) // 10000

async def handle_offer_buy(message: types.Message, offer_id: int):
    # –Ω–∞–π—Ç–∏ –ª–æ—Ç
    offers = await list_active_offers()
    offer = None
    for o in offers:
        if o["offer_id"] == offer_id:
            offer = o
            break
    if not offer:
        await message.reply("–¢–∞–∫–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ—Ç–∞ –Ω–µ—Ç.")
        return

    buyer_id = message.from_user.id
    price = offer["price"]
    bal = await get_balance(buyer_id)
    if price > bal:
        await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è {price}, –Ω–∞ —Ä—É–∫–∞—Ö {bal}.")
        return

    burn = await _apply_burn_and_return(price)
    to_seller = price - burn

    # —Å–ø–∏—Å—ã–≤–∞–µ–º —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    await change_balance(buyer_id, -price, f"–ø–æ–∫—É–ø–∫–∞ –ª–æ—Ç–∞ #{offer_id}", buyer_id)
    # –Ω–∞—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü—É
    if to_seller > 0:
        await change_balance(offer["seller_id"], to_seller, f"–ø—Ä–æ–¥–∞–∂–∞ –ª–æ—Ç–∞ #{offer_id}", buyer_id)
    # —Å–∂–∏–≥–∞–µ–º
    if burn > 0:
        await record_burn(burn, f"offer_id={offer_id}")

    # –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É
    from db import insert_history  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞—Ç—å—Å—è –≤–≤–µ—Ä—Ö—É
    sale_id = await insert_history(buyer_id, "offer_sold", price, f"offer_id={offer_id};seller={offer['seller_id']}")

    # –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    from datetime import datetime
    today = datetime.utcnow().strftime("%Y%m%d")
    contract_id = f"C-{today}-{sale_id}"
    seller_mention = mention_html(offer["seller_id"], "–ü—Ä–æ–¥–∞–≤–µ—Ü")
    await message.reply(
        "üßæ –ö–æ–Ω—Ç—Ä–∞–∫—Ç {cid}\n"
        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {mention_html(buyer_id, message.from_user.full_name)}\n"
        f"–¢–æ–≤–∞—Ä: ¬´–ª–æ—Ç #{offer_id}¬ª ({offer['link'] or '—Å—Å—ã–ª–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'})\n"
        f"–¶–µ–Ω–∞: {price}\n"
        f"–ö–æ–º–∏—Å—Å–∏—è (—Å–∂–∏–≥–∞–Ω–∏–µ): {burn}\n"
        f"–ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–¥–∞–≤—Ü—É: {to_seller}\n"
        f"–ì–∞—Ä–∞–Ω—Ç: @kovalskyii\n"
        f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_mention}".format(cid=contract_id),
        parse_mode="HTML"
    )

async def handle_buy_emerald(message: types.Message):
    price = await get_price_emerald()
    buyer_id = message.from_user.id
    bal = await get_balance(buyer_id)
    if price > bal:
        await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è {price}, –Ω–∞ —Ä—É–∫–∞—Ö {bal}.")
        return
    burn = await _apply_burn_and_return(price)
    # —Å–ø–∏—Å—ã–≤–∞–µ–º —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–∫ –±—ã —É—Ö–æ–¥–∏—Ç –≤ —Å–µ–π—Ñ, —Ç.–∫. –Ω–∏–∫–æ–º—É –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º)
    await change_balance(buyer_id, -price, "–ø–æ–∫—É–ø–∫–∞ —ç–º–µ—Ä–∞–ª—å–¥–∞", buyer_id)
    if burn > 0:
        await record_burn(burn, "emerald")
    # –∫–æ–Ω—Ç—Ä–∞–∫—Ç/—á–µ–∫
    from db import insert_history
    sale_id = await insert_history(buyer_id, "emerald_buy", price, None)
    from datetime import datetime
    today = datetime.utcnow().strftime("%Y%m%d")
    contract_id = f"C-{today}-{sale_id}"
    await message.reply(
        "üßæ –ö–æ–Ω—Ç—Ä–∞–∫—Ç {cid}\n"
        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {mention_html(buyer_id, message.from_user.full_name)}\n"
        f"–¢–æ–≤–∞—Ä: ¬´–≠–º–µ—Ä–∞–ª—å–¥¬ª\n"
        f"–¶–µ–Ω–∞: {price}\n"
        f"–ö–æ–º–∏—Å—Å–∏—è (—Å–∂–∏–≥–∞–Ω–∏–µ): {burn}\n"
        f"–ü–µ—Ä–µ–≤–æ–¥ –≤ —Å–µ–π—Ñ: {price - burn}\n"
        f"–ì–∞—Ä–∞–Ω—Ç: @kovalskyii".format(cid=contract_id),
        parse_mode="HTML"
    )

async def handle_buy_perk(message: types.Message, code: str):
    code = code.strip().lower()
    if code not in PERK_REGISTRY:
        await message.reply("–¢–∞–∫–æ–≥–æ –ø–µ—Ä–∫–∞ –Ω–µ—Ç.")
        return
    price = await get_price_perk(code)
    if price is None:
        await message.reply("–≠—Ç–æ—Ç –ø–µ—Ä–∫ —Å–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è.")
        return
    buyer_id = message.from_user.id
    bal = await get_balance(buyer_id)
    if price > bal:
        await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è {price}, –Ω–∞ —Ä—É–∫–∞—Ö {bal}.")
        return
    burn = await _apply_burn_and_return(price)
    # —Å–ø–∏—Å—ã–≤–∞–µ–º —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    await change_balance(buyer_id, -price, f"–ø–æ–∫—É–ø–∫–∞ –ø–µ—Ä–∫–∞ {code}", buyer_id)
    if burn > 0:
        await record_burn(burn, f"perk={code}")
    # –≤—ã–¥–∞—ë–º –ø–µ—Ä–∫
    await grant_perk(buyer_id, code)

    # —á–µ–∫
    from db import insert_history
    sale_id = await insert_history(buyer_id, "perk_buy", price, code)
    from datetime import datetime
    today = datetime.utcnow().strftime("%Y%m%d")
    contract_id = f"C-{today}-{sale_id}"
    emoji, title = PERK_REGISTRY[code]
    await message.reply(
        f"üßæ –ö–æ–Ω—Ç—Ä–∞–∫—Ç {contract_id}\n"
        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {mention_html(buyer_id, message.from_user.full_name)}\n"
        f"–¢–æ–≤–∞—Ä: ¬´{title}¬ª\n"
        f"–¶–µ–Ω–∞: {price}\n"
        f"–ö–æ–º–∏—Å—Å–∏—è (—Å–∂–∏–≥–∞–Ω–∏–µ): {burn}\n"
        f"–ü–µ—Ä–µ–≤–æ–¥ –≤ —Å–µ–π—Ñ: {price - burn}\n"
        f"–ì–∞—Ä–∞–Ω—Ç: @kovalskyii",
        parse_mode="HTML"
    )

# --------- –í–∏—Ç—Ä–∏–Ω–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ / —Å–µ–π—Ñ ---------

async def handle_vault_enable(message: types.Message):
    if message.from_user.id != KURATOR_ID:
        return
    m = re.match(r"^–≤–∫–ª—é—á–∏—Ç—å\s+—Å–µ–π—Ñ\s+(\d+)$", message.text.strip().lower())
    if not m:
        await message.reply("–ü—Ä–∏–º–µ—Ä: ¬´–≤–∫–ª—é—á–∏—Ç—å —Å–µ–π—Ñ 1000000¬ª")
        return
    cap = int(m.group(1))
    circulating = await get_circulating_safe()
    rid = await vault_init(cap, circulating)
    if rid is None:
        await message.reply("–ö–∞–ø –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±–æ—Ä–æ—Ç–∞ ‚Äî —É–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ø.")
        return
    await message.reply(f"–°–µ–π—Ñ –≤–∫–ª—é—á—ë–Ω. –ö–∞–ø: {cap}. –í –æ–±–æ—Ä–æ—Ç–µ: {circulating}. –û—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞–ª–æ–∂–µ–Ω–æ –≤ —Å–µ–π—Ñ.")

async def get_circulating_safe() -> int:
    # –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–æ–ª—è—Ü–∏–∏
    from db import get_circulating
    return await get_circulating()

async def handle_vault_reset(message: types.Message):
    if message.from_user.id != KURATOR_ID:
        return
    m = re.match(r"^–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å\s+—Å–µ–π—Ñ\s+(\d+)\s+–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é$", message.text.strip().lower())
    if not m:
        await message.reply('–ü—Ä–∏–º–µ—Ä: ¬´–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—Ñ 1000000 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é¬ª')
        return
    cap = int(m.group(1))
    circulating = await get_circulating_safe()
    rid = await vault_init(cap, circulating)
    if rid is None:
        await message.reply("–ö–∞–ø –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±–æ—Ä–æ—Ç–∞ ‚Äî —É–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ø.")
        return
    await message.reply(f"–°–µ–π—Ñ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ù–æ–≤—ã–π –∫–∞–ø: {cap}. –í –æ–±–æ—Ä–æ—Ç–µ: {circulating}.")

async def handle_vault_stats(message: types.Message):
    stats = await get_economy_stats()
    if not stats:
        await message.reply("–°–µ–π—Ñ –µ—â—ë –Ω–µ –≤–∫–ª—é—á—ë–Ω.")
        return
    bps = stats["burn_bps"]
    pct = fmt_percent_bps(bps)
    # –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–∂–∂—ë–Ω–Ω–æ–≥–æ –æ—Ç –∫–∞–ø–∞
    burned_pct = 0.0
    if stats["cap"] > 0:
        burned_pct = (stats["burned"] / stats["cap"]) * 100
    income = stats["income"]
    txt = (
        "üè¶ <b>–≠–∫–æ–Ω–æ–º–∏–∫–∞ –ö–ª—É–±–∞</b>\n\n"
        f"–ö–∞–ø: {stats['cap']}\n"
        f"–í –æ–±–æ—Ä–æ—Ç–µ: {stats['circulating']}\n"
        f"–°–æ–∂–∂–µ–Ω–æ: {stats['burned']} ({burned_pct:.2f}%)\n"
        f"–í —Å–µ–π—Ñ–µ: {stats['vault']}\n"
        f"–°–∂–∏–≥–∞–Ω–∏–µ (—Ä—ã–Ω–æ–∫): {pct}\n"
        f"–î–æ—Ö–æ–¥—ã (–∑–ø/–∫—Ä–∞–∂–∞): {income}"
    )
    await message.reply(txt, parse_mode="HTML")

# --------- –∫–æ–Ω—Ñ–∏–≥–∏ —Å–µ—Ç—Ç–µ—Ä—ã ---------

async def handle_burn_bps_set(message: types.Message, v: int):
    await set_burn_bps(v)
    await message.reply(f"–°–∂–∏–≥–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {fmt_percent_bps(await get_burn_bps())}")

async def handle_price_emerald_set(message: types.Message, v: int):
    await set_price_emerald(v)
    await message.reply(f"–¶–µ–Ω–∞ —ç–º–µ—Ä–∞–ª—å–¥–∞: {v} –Ω—É–∞—Ä–æ–≤.")

async def handle_price_perk_set(message: types.Message, code: str, v: int):
    code = code.strip().lower()
    if code not in PERK_REGISTRY:
        await message.reply("–¢–∞–∫–æ–≥–æ –ø–µ—Ä–∫–∞ –Ω–µ—Ç.")
        return
    await set_price_perk(code, v)
    await message.reply(f"–¶–µ–Ω–∞ –ø–µ—Ä–∫–∞ ¬´{PERK_REGISTRY[code][1]}¬ª: {v} –Ω—É–∞—Ä–æ–≤.")

async def handle_multiplier_set(message: types.Message, game: str, x: int):
    await set_multiplier(game, x)
    await message.reply(f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è ¬´{game}¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: √ó{x}")

async def handle_casino_toggle(message: types.Message):
    turn_on = message.text.strip().endswith("–æ—Ç–∫—Ä—ã—Ç—å")
    await set_casino_on(turn_on)
    await message.reply("üé∞ –ö–∞–∑–∏–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ." if turn_on else "üé∞ –ö–∞–∑–∏–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")

async def handle_income_set(message: types.Message, v: int):
    await set_income(v)
    await message.reply(f"–î–æ—Ö–æ–¥—ã (–∑–ø/–∫—Ä–∞–∂–∞) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {v}.")

async def handle_limit_bet_set(message: types.Message, v: int):
    await set_limit_bet(v)
    await message.reply("–õ–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏ –æ—Ç–∫–ª—é—á—ë–Ω." if v == 0 else f"–õ–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏: {v}.")

async def handle_limit_rain_set(message: types.Message, v: int):
    await set_limit_rain(v)
    await message.reply("–õ–∏–º–∏—Ç –¥–æ–∂–¥—è –æ—Ç–∫–ª—é—á—ë–Ω." if v == 0 else f"–õ–∏–º–∏—Ç –¥–æ–∂–¥—è: {v}.")

# --------- ¬´–∫–∞—Ä–º–∞–Ω¬ª –∫—É—Ä–∞—Ç–æ—Ä–∞ ---------

async def handle_kurator_karman(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∏–∫–µ—Ç –ö–ª—É–±–∞ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return
    target = message.reply_to_message.from_user
    balance = await get_balance(target.id)
    await message.reply(
        f"üíº {mention_html(target.id, target.full_name)} —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–≤–æ—ë–º –∫–∞—Ä–º–∞–Ω–µ {balance} –Ω—É–∞—Ä–æ–≤.",
        parse_mode="HTML"
    )

# --------- –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ¬´—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥¬ª ---------

async def handle_commands_catalog(message: types.Message):
    # –ö—É—Ä–∞—Ç–æ—Ä
    curator = [
        "–≤–∫–ª—é—á–∏—Ç—å —Å–µ–π—Ñ <CAP> ‚Äî –≤–∫–ª—é—á–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏–∫—É –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–µ–π—Ñ",
        "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—Ñ <CAP> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚Äî –∞–≤–∞—Ä–∏–π–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–∏–∫–∏",
        "—Å–∂–∏–≥–∞–Ω–∏–µ <bps> ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∏–≥–∞–Ω–∏—è —Ä—ã–Ω–∫–∞ (100 = 1%)",
        "—Ü–µ–Ω–∞ —ç–º–µ—Ä–∞–ª—å–¥ <N> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —ç–º–µ—Ä–∞–ª—å–¥–∞",
        "—Ü–µ–Ω–∞ –ø–µ—Ä–∫ <–∫–æ–¥> <N> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –ø–µ—Ä–∫–∞",
        "–º–Ω–æ–∂–∏—Ç–µ–ª—å –∫—É–±–∏–∫|–¥–∞—Ä—Ç—Å|–±–æ—É–ª–∏–Ω–≥|–∞–≤—Ç–æ–º–∞—Ç—ã <X> ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞",
        "–∫–∞–∑–∏–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–≥—Ä—ã",
        "–¥–æ—Ö–æ–¥—ã <N> ‚Äî —Ä–∞–∑–º–µ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π ¬´–∑–ø¬ª –∏ –∫—Ä–∞–∂–∏",
        "–ª–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∞ <N> ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞ –∏–≥—Ä—É (0 ‚Äî –±–µ–∑ –ª–∏–º–∏—Ç–∞)",
        "–ª–∏–º–∏—Ç –¥–æ–∂–¥—å <N> ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É ¬´–¥–æ–∂–¥—å¬ª (0 ‚Äî –±–µ–∑ –ª–∏–º–∏—Ç–∞)",
        "—É –∫–æ–≥–æ –ø–µ—Ä–∫ <–∫–æ–¥> ‚Äî —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–π –ø–µ—Ä–∫–∞",
        "–ø–µ—Ä–∫–∏ —Ä–µ–µ—Å—Ç—Ä ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –ø–µ—Ä–∫–∞–º",
        "–Ω–∞–∑–Ω–∞—á–∏—Ç—å \"—Ä–æ–ª—å\" <–æ–ø–∏—Å–∞–Ω–∏–µ> (reply) ‚Äî –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å",
        "—Å–Ω—è—Ç—å —Ä–æ–ª—å (reply) ‚Äî –ª–∏—à–∏—Ç—å —Ä–æ–ª–∏",
        "–∫–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞ (reply) / —Å–Ω—è—Ç—å –∫–ª—é—á (reply)",
        "–æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å (reply) / –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã / –æ–±–Ω—É–ª–∏—Ç—å –∫–ª—É–±",
    ]
    # –í–ª–∞–¥–µ–ª—å—Ü—ã –∫–ª—é—á–∞
    keyholders = [
        "–≤—Ä—É—á–∏—Ç—å <N> (reply) ‚Äî –≤—ã–¥–∞—Ç—å –∏–∑ —Å–µ–π—Ñ–∞",
        "–≤–∑—ã—Å–∫–∞—Ç—å <N> (reply) ‚Äî –∑–∞–±—Ä–∞—Ç—å –≤ —Å–µ–π—Ñ",
        "–∫–∞—Ä–º–∞–Ω (reply) ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞",
    ]
    # –ß–ª–µ–Ω—ã –∫–ª—É–±–∞
    members = [
        "–º–æ–π –∫–∞—Ä–º–∞–Ω / –º–æ—è —Ä–æ–ª—å / —Ä–æ–ª—å (reply)",
        "—Ä–µ–π—Ç–∏–Ω–≥ –∫–ª—É–±–∞ / —á–ª–µ–Ω—ã –∫–ª—É–±–∞ / —Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ –∫–ª—é—á–∞",
        "–ø–µ—Ä–µ–¥–∞—Ç—å <N> (reply) ‚Äî –ø–µ—Ä–µ–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫—É",
        "–¥–æ–∂–¥—å <N> ‚Äî —Ä–∞–∑–¥–∞—Ç—å –¥–æ 5 —Å–ª—É—á–∞–π–Ω—ã–º",
        "—Å—Ç–∞–≤–ª—é <N> –Ω–∞ üé≤ ‚Äî —Å—Ç–∞–≤–∫–∞ –≤ –∫—É–±–∏–∫",
        "—Ä—ã–Ω–æ–∫ ‚Äî –≤–∏—Ç—Ä–∏–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ª–æ—Ç–æ–≤",
        "–∫—É–ø–∏—Ç—å —ç–º–µ—Ä–∞–ª—å–¥ / –∫—É–ø–∏—Ç—å –ø–µ—Ä–∫ <–∫–æ–¥> / –∫—É–ø–∏—Ç—å <offer_id>",
        "–≤—ã—Å—Ç–∞–≤–∏—Ç—å <—Å—Å—ã–ª–∫–∞> <—Ü–µ–Ω–∞> / —Å–Ω—è—Ç—å –ª–æ—Ç <offer_id>",
        "–º–æ–∏ –ø–µ—Ä–∫–∏ / –ø–µ—Ä–∫–∏ (reply)",
        "–ø–æ–ª—É—á–∏—Ç—å –∑–ø ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –ø–æ –ø–µ—Ä–∫—É",
        "—É–∫—Ä–∞—Å—Ç—å / —Å–≤–æ—Ä–æ–≤–∞—Ç—å (reply) ‚Äî –∫—Ä–∞–∂–∞ –ø–æ –ø–µ—Ä–∫—É ¬´–≤–æ—Ä¬ª",
        "—Å–µ–π—Ñ ‚Äî —Å–≤–æ–¥–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∫–ª—É–±–∞",
    ]

def bullets(items: list[str]) -> str:
    def fmt(s: str) -> str:
        # –õ—é–±–æ–µ <—á—Ç–æ-—Ç–æ> –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –≤ <code>—á—Ç–æ-—Ç–æ</code>
        return re.sub(r"<([^<>]+)>", r"<code>\1</code>", s)
    return "\n".join(f"‚Ä¢ {fmt(s)}" for s in items)

    txt = (
        "üìú <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</b>\n\n"
        "üëë <b>–ö—É—Ä–∞—Ç–æ—Ä</b>\n" + bullets(curator) + "\n\n"
        "üóù <b>–í–ª–∞–¥–µ–ª—å—Ü—ã –∫–ª—é—á–∞</b>\n" + bullets(keyholders) + "\n\n"
        "üé≠ <b>–ß–ª–µ–Ω—ã –∫–ª—É–±–∞</b>\n" + bullets(members)
    )
    await message.reply(txt, parse_mode="HTML")
